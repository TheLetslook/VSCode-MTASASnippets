{
	"fori": {
		"prefix": "fori",
		"body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
		"description": "for i,v in ipairs()",
		"scope": "source.lua"
	},
	"for": {
		"prefix": "for",
		"body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
		"description": "for i=1,10",
		"scope": "source.lua"
	},
	"forp": {
		"prefix": "forp",
		"body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
		"description": "for k,v in pairs()",
		"scope": "source.lua"
	},
	"fun": {
		"prefix": "fun",
		"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"function": {
		"prefix": "function",
		"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"local": {
		"prefix": "local",
		"body": "local ${1:x} = ${0:1}",
		"description": "local x = 1",
		"scope": "source.lua"
	},
	"string.find": {
		"prefix": "string.find",
		"body": "string.find( ${1:str}, ${2:index} )",
		"description": "",
		"scope": "source.lua"
	},
	"table.concat": {
		"prefix": "table.concat",
		"body": "table.concat( ${1:tablename},${2: \", \"},${3: start_index},${4: end_index} )",
		"description": "table.concat",
		"scope": "source.lua"
	},
	"table.sort": {
		"prefix": "table.sort",
		"body": "table.sort( ${1:tablename}${2:, sortfunction} )",
		"description": "table.sort",
		"scope": "source.lua"
	},
	"aclCreate": {
		"prefix": "aclCreate",
		"body": "aclCreate( ${1:string aclName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclCreateGroup": {
		"prefix": "aclCreateGroup",
		"body": "aclCreateGroup( ${1:string groupName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclDestroy": {
		"prefix": "aclDestroy",
		"body": "aclDestroy( ${1:acl theACL} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclDestroyGroup": {
		"prefix": "aclDestroyGroup",
		"body": "aclDestroyGroup( ${1:aclgroup aclGroup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGet": {
		"prefix": "aclGet",
		"body": "aclGet( ${1:string aclName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGetGroup": {
		"prefix": "aclGetGroup",
		"body": "aclGetGroup( ${1:string groupName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGetName": {
		"prefix": "aclGetName",
		"body": "aclGetName( ${1:acl theAcl} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGetRight": {
		"prefix": "aclGetRight",
		"body": "aclGetRight( ${1:acl theAcl}, ${2:string rightName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupAddACL": {
		"prefix": "aclGroupAddACL",
		"body": "aclGroupAddACL( ${1:aclgroup theGroup}, ${2:acl theACL} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupAddObject": {
		"prefix": "aclGroupAddObject",
		"body": "aclGroupAddObject( ${1:aclgroup theGroup}, ${2:string theObjectName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupGetName": {
		"prefix": "aclGroupGetName",
		"body": "aclGroupGetName( aclGroup )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupList": {
		"prefix": "aclGroupList",
		"body": "aclGroupList(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupListACL": {
		"prefix": "aclGroupListACL",
		"body": "aclGroupListACL( ${1:aclgroup theGroup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupListObjects": {
		"prefix": "aclGroupListObjects",
		"body": "aclGroupListObjects( ${1:aclgroup theGroup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupRemoveACL": {
		"prefix": "aclGroupRemoveACL",
		"body": "aclGroupRemoveACL( ${1:aclgroup theGroup}, ${2:acl theACL} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclGroupRemoveObject": {
		"prefix": "aclGroupRemoveObject",
		"body": "aclGroupRemoveObject( ${1:aclgroup theGroup}, ${2:string theObjectString} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclList": {
		"prefix": "aclList",
		"body": "aclList(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclListRights": {
		"prefix": "aclListRights",
		"body": "aclListRights( ${1:acl theACL}, ${2:string allowedType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclReload": {
		"prefix": "aclReload",
		"body": "aclReload(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclRemoveRight": {
		"prefix": "aclRemoveRight",
		"body": "aclRemoveRight( ${1:acl theAcl}, ${2:string rightName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclSave": {
		"prefix": "aclSave",
		"body": "aclSave(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"aclSetRight": {
		"prefix": "aclSetRight",
		"body": "aclSetRight( ${1:acl theAcl}, ${2:string rightName}, ${3:bool hasAccess} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addAccount": {
		"prefix": "addAccount",
		"body": "addAccount( ${1:string name}, ${2:string pass} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addBan": {
		"prefix": "addBan",
		"body": "addBan( [ ${1:string IP}, ${2:string Username}, ${3:string Serial}, ${4:player responsibleElement}, ${5:string reason}, ${6:int seconds = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addCommandHandler": {
		"prefix": "addCommandHandler",
		"body": "addCommandHandler( ${1:string commandName}, ${2:function handlerFunction}, [${3:bool restricted = false}, ${4:bool caseSensitive = true}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addDebugHook": {
		"prefix": "addDebugHook",
		"body": "addDebugHook( ${1:string hookType}, ${2:function callbackFunction}[, ${3:table nameList }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addEvent": {
		"prefix": "addEvent",
		"body": "addEvent( ${1:string eventName }[, ${2:bool allowRemoteTrigger = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addEventHandler": {
		"prefix": "addEventHandler",
		"body": "addEventHandler( ${1:string eventName}, ${2:element attachedTo}, ${3:function handlerFunction}, [ ${4:bool getPropagated = true}, ${5:string priority = }\"normal\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addPedClothes": {
		"prefix": "addPedClothes",
		"body": "addPedClothes( ${1:ped thePed}, ${2:string clothesTexture}, ${3:string clothesModel}, ${4:int clothesType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addResourceConfig": {
		"prefix": "addResourceConfig",
		"body": "addResourceConfig( ${1:string filePath}, [ ${2:string filetype = }\"server\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addResourceMap": {
		"prefix": "addResourceMap",
		"body": "addResourceMap( ${1:string filePath}, [ ${2:int dimension = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addVehicleSirens": {
		"prefix": "addVehicleSirens",
		"body": "addVehicleSirens( ${1:vehicle theVehicle}, ${2:int sirenCount}, ${3:int sirenType}, [${4:bool 360flag = false}, ${5:bool checkLosFlag = true}, ${6:bool useRandomiser flag }= true, ${7:bool silentFlag = false} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addVehicleUpgrade": {
		"prefix": "addVehicleUpgrade",
		"body": "addVehicleUpgrade( ${1:vehicle theVehicle}, ${2:int upgrade} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"areTrafficLightsLocked": {
		"prefix": "areTrafficLightsLocked",
		"body": "areTrafficLightsLocked(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"attachElements": {
		"prefix": "attachElements",
		"body": "attachElements( ${1:element theElement}, ${2:element theAttachToElement}, [ ${3:float xPosOffset}, ${4:float yPosOffset}, ${5:float zPosOffset}, ${6:float xRotOffset}, ${7:float yRotOffset}, ${8:float zRotOffset }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"attachTrailerToVehicle": {
		"prefix": "attachTrailerToVehicle",
		"body": "attachTrailerToVehicle( ${1:vehicle theVehicle}, ${2:vehicle theTrailer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"banPlayer": {
		"prefix": "banPlayer",
		"body": "banPlayer( ${1:player bannedPlayer}, [ ${2:bool IP = true}, ${3:bool Username = false}, ${4:bool Serial = false}, ${5:player responsiblePlayer = nil}, ${6:string reason = nil}, ${7:int seconds = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"base64Decode": {
		"prefix": "base64Decode",
		"body": "base64Decode( ${1:string data} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"base64Encode": {
		"prefix": "base64Encode",
		"body": "base64Encode( ${1:string data} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"blowVehicle": {
		"prefix": "blowVehicle",
		"body": "blowVehicle( ${1:vehicle vehicleToBlow}, [ ${2:bool explode=true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"breakObject": {
		"prefix": "breakObject",
		"body": "breakObject( ${1:object theObject} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"call": {
		"prefix": "call",
		"body": "call( ${1:resource theResource}, ${2:string theFunction}, [ arguments... ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"callRemote": {
		"prefix": "callRemote",
		"body": "callRemote( ${1:string host}[, ${2:int connectionAttempts = 10} ], ${3:string resourceName}, ${4:string functionName}, ${5:callback callbackFunction}, [ arguments... ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"cancelEvent": {
		"prefix": "cancelEvent",
		"body": "cancelEvent( [ ${1:bool cancel = true}, ${2:string reason = }\"\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"cancelLatentEvent": {
		"prefix": "cancelLatentEvent",
		"body": "cancelLatentEvent( ${1:player thePlayer}, ${2:int handle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"clearElementVisibleTo": {
		"prefix": "clearElementVisibleTo",
		"body": "clearElementVisibleTo( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"cloneElement": {
		"prefix": "cloneElement",
		"body": "cloneElement( ${1:element theElement}, [ ${2:float xPos = 0}, ${3:float yPos = 0}, ${4:float zPos = 0}, ${5:bool cloneChildren = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"copyAccountData": {
		"prefix": "copyAccountData",
		"body": "copyAccountData( ${1:account theAccount}, ${2:account fromAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"copyResource": {
		"prefix": "copyResource",
		"body": "copyResource( ${1:resource theResource}, ${2:string newResourceName }[, ${3:string organizationalDir }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"countPlayersInTeam": {
		"prefix": "countPlayersInTeam",
		"body": "countPlayersInTeam( ${1:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createBlip": {
		"prefix": "createBlip",
		"body": "createBlip( ${1:float x}, ${2:float y}, ${3:float z }[, ${4:int icon = 0}, ${5:int size = 2}, ${6:int r = 255}, ${7:int g = 0}, ${8:int b = 0}, ${9:int a = 255}, ${10:int ordering = 0}, ${11:float visibleDistance = 99999.0}, visibleTo = getRootElement( ) ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createBlipAttachedTo": {
		"prefix": "createBlipAttachedTo",
		"body": "createBlipAttachedTo( ${1:element elementToAttachTo}, [${2:int icon=0}, ${3:int size=2}, ${4:int r=255}, ${5:int g=0}, ${6:int b=0}, ${7:int a=255}, ${8:int ordering=0}, ${9:float visibleDistance=99999.0}, visibleTo = getRootElement()] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColCircle": {
		"prefix": "createColCircle",
		"body": "createColCircle( ${1:float fX}, ${2:float fY}, ${3:float radius} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColCuboid": {
		"prefix": "createColCuboid",
		"body": "createColCuboid( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fWidth}, ${5:float fDepth}, ${6:float fHeight} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColPolygon": {
		"prefix": "createColPolygon",
		"body": "createColPolygon( ${1:float fX}, ${2:float fY}, ${3:float fX1}, ${4:float fY1}, ${5:float fX2}, ${6:float fY2}, ${7:float fX3}, ${8:float fY3}, ... )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColRectangle": {
		"prefix": "createColRectangle",
		"body": "createColRectangle( ${1:float fX}, ${2:float fY}, ${3:float fWidth}, ${4:float fHeight} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColSphere": {
		"prefix": "createColSphere",
		"body": "createColSphere( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fRadius} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColTube": {
		"prefix": "createColTube",
		"body": "createColTube( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fRadius}, ${5:float fHeight} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createElement": {
		"prefix": "createElement",
		"body": "createElement( ${1:string elementType}, [ ${2:string elementID = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createExplosion": {
		"prefix": "createExplosion",
		"body": "createExplosion( ${1:float x}, ${2:float y}, ${3:float z}, ${4:int theType }[, ${5:player creator = nil} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createMarker": {
		"prefix": "createMarker",
		"body": "createMarker( ${1:float x}, ${2:float y}, ${3:float z }[, ${4:string theType = }\"checkpoint\", ${5:float size = 4.0}, ${6:int r = 0}, ${7:int g = 0}, ${8:int b = 255}, ${9:int a = 255}, visibleTo = getRootElement( ) ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createObject": {
		"prefix": "createObject",
		"body": "createObject( ${1:int modelid}, ${2:float x}, ${3:float y}, ${4:float z}, [ ${5:float rx}, ${6:float ry}, ${7:float rz}, ${8:bool isLowLOD = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createPed": {
		"prefix": "createPed",
		"body": "createPed( ${1:int modelid}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rot = 0.0}, ${6:bool synced = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createPickup": {
		"prefix": "createPickup",
		"body": "createPickup( ${1:float x}, ${2:float y}, ${3:float z}, ${4:int theType}, ${5:int amount}/weapon/model, [ ${6:int respawnTime = 30000}, ${7:int ammo = 50} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createRadarArea": {
		"prefix": "createRadarArea",
		"body": "createRadarArea( ${1:float leftX}, ${2:float bottomY}, ${3:float sizeX}, ${4:float sizeY},                          [ ${5:int r = 255}, ${6:int g = 0}, ${7:int b = 0}, ${8:int a = 255},                            ${9:element visibleTo = getRootElement()} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createResource": {
		"prefix": "createResource",
		"body": "createResource( ${1:string resourceName }[, ${2:string organizationalDir }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createTeam": {
		"prefix": "createTeam",
		"body": "createTeam( ${1:string teamName}, [${2:int colorR = 255}, ${3:int colorG = 255}, ${4:int colorB = 255}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createVehicle": {
		"prefix": "createVehicle",
		"body": "createVehicle( ${1:int model}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rx}, ${6:float ry}, ${7:float rz}, ${8:string numberplate}, ${9:bool bDirection}, ${10:int variant1}, ${11:int variant2 }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createWater": {
		"prefix": "createWater",
		"body": "createWater( ${1:int x1}, ${2:int y1}, ${3:float z1}, ${4:int x2}, ${5:int y2}, ${6:float z2}, ${7:int x3}, ${8:int y3}, ${9:float z3 }[, ${10:int x4}, ${11:int y4}, ${12:float z4 }] [, ${13:bool bShallow = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"dbConnect": {
		"prefix": "dbConnect",
		"body": "dbConnect( ${1:string databaseType}, ${2:string host }[, ${3:string username = }\"\", ${4:string password = }\"\", ${5:string options = }\"\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"dbExec": {
		"prefix": "dbExec",
		"body": "dbExec( ${1:element databaseConnection}, ${2:string query }[, ${3:var param1 }[, ${4:var param2 }...]] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"dbFree": {
		"prefix": "dbFree",
		"body": "dbFree( ${1:handle queryHandle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"dbPoll": {
		"prefix": "dbPoll",
		"body": "dbPoll( ${1:handle queryHandle}, ${2:int timeout} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"dbQuery": {
		"prefix": "dbQuery",
		"body": "dbQuery( [ ${1:function callbackFunction}, [ ${2:table callbackArguments}, ] ] ${3:element databaseConnection}, ${4:string query }[, ${5:var param1 }[, ${6:var param2 }...]] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"deleteResource": {
		"prefix": "deleteResource",
		"body": "deleteResource( ${1:string resourceName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"destroyElement": {
		"prefix": "destroyElement",
		"body": "destroyElement( ${1:element elementToDestroy} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"detachElements": {
		"prefix": "detachElements",
		"body": "detachElements( ${1:element theElement}, [ ${2:element theAttachToElement }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"detachTrailerFromVehicle": {
		"prefix": "detachTrailerFromVehicle",
		"body": "detachTrailerFromVehicle( ${1:vehicle theVehicle }[, ${2:vehicle theTrailer = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"detonateSatchels": {
		"prefix": "detonateSatchels",
		"body": "detonateSatchels( ${1:player Player} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"doesPedHaveJetPack": {
		"prefix": "doesPedHaveJetPack",
		"body": "doesPedHaveJetPack( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"executeCommandHandler": {
		"prefix": "executeCommandHandler",
		"body": "executeCommandHandler( ${1:string commandName}, ${2:player thePlayer}, [ ${3:string args }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"executeSQLQuery": {
		"prefix": "executeSQLQuery",
		"body": "executeSQLQuery( ${1:string query }[, ${2:var param1 }[, ${3:var param2 }...]] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fadeCamera": {
		"prefix": "fadeCamera",
		"body": "fadeCamera( ${1:player thePlayer}, ${2:bool fadeIn}, [ ${3:float timeToFade = 1.0}, ${4:int red = 0}, ${5:int green = 0}, ${6:int blue = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fetchRemote": {
		"prefix": "fetchRemote",
		"body": "fetchRemote( ${1:string URL}[, ${2:int connectionAttempts = 10} ], ${3:callback callbackFunction}, [ ${4:string postData = }\"\", ${5:bool postIsBinary = false}, [ arguments... ] ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileClose": {
		"prefix": "fileClose",
		"body": "fileClose( ${1:file theFile} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileCopy": {
		"prefix": "fileCopy",
		"body": "fileCopy( ${1:string filePath}, ${2:string copyToFilePath }[, ${3:bool overwrite = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileCreate": {
		"prefix": "fileCreate",
		"body": "fileCreate( ${1:string filePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileDelete": {
		"prefix": "fileDelete",
		"body": "fileDelete( ${1:string filePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileExists": {
		"prefix": "fileExists",
		"body": "fileExists( ${1:string filePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileFlush": {
		"prefix": "fileFlush",
		"body": "fileFlush( ${1:file theFile} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileGetPos": {
		"prefix": "fileGetPos",
		"body": "fileGetPos( ${1:file theFile} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileGetSize": {
		"prefix": "fileGetSize",
		"body": "fileGetSize( ${1:file theFile} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileIsEOF": {
		"prefix": "fileIsEOF",
		"body": "fileIsEOF( ${1:file theFile} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileOpen": {
		"prefix": "fileOpen",
		"body": "fileOpen( ${1:string filePath }[, ${2:bool readOnly = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileRead": {
		"prefix": "fileRead",
		"body": "fileRead( ${1:file theFile}, ${2:int count} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileRename": {
		"prefix": "fileRename",
		"body": "fileRename( ${1:string filePath}, ${2:string newFilePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileSetPos": {
		"prefix": "fileSetPos",
		"body": "fileSetPos( ${1:file theFile}, ${2:int offset} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fileWrite": {
		"prefix": "fileWrite",
		"body": "fileWrite( ${1:file theFile}, ${2:string string1 }[, ${3:string string2}, ${4:string string3 }...] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fixVehicle": {
		"prefix": "fixVehicle",
		"body": "fixVehicle( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"forcePlayerMap": {
		"prefix": "forcePlayerMap",
		"body": "forcePlayerMap( ${1:player thePlayer}, ${2:bool forceOn} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fromJSON": {
		"prefix": "fromJSON",
		"body": "fromJSON( ${1:string json} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"get": {
		"prefix": "get",
		"body": "get( ${1:string settingName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccount": {
		"prefix": "getAccount",
		"body": "getAccount( ${1:string username}, [ ${2:string password }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccountData": {
		"prefix": "getAccountData",
		"body": "getAccountData( ${1:account theAccount}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccountName": {
		"prefix": "getAccountName",
		"body": "getAccountName( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccountPlayer": {
		"prefix": "getAccountPlayer",
		"body": "getAccountPlayer( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccounts": {
		"prefix": "getAccounts",
		"body": "getAccounts(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccountsBySerial": {
		"prefix": "getAccountsBySerial",
		"body": "getAccountsBySerial( ${1:string serial} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAccountSerial": {
		"prefix": "getAccountSerial",
		"body": "getAccountSerial( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAircraftMaxHeight": {
		"prefix": "getAircraftMaxHeight",
		"body": "getAircraftMaxHeight(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAircraftMaxVelocity": {
		"prefix": "getAircraftMaxVelocity",
		"body": "getAircraftMaxVelocity(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAlivePlayers": {
		"prefix": "getAlivePlayers",
		"body": "getAlivePlayers(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAllAccountData": {
		"prefix": "getAllAccountData",
		"body": "getAllAccountData( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAllElementData": {
		"prefix": "getAllElementData",
		"body": "getAllElementData( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getAttachedElements": {
		"prefix": "getAttachedElements",
		"body": "getAttachedElements( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanAdmin": {
		"prefix": "getBanAdmin",
		"body": "getBanAdmin( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanIP": {
		"prefix": "getBanIP",
		"body": "getBanIP( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanNick": {
		"prefix": "getBanNick",
		"body": "getBanNick( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanReason": {
		"prefix": "getBanReason",
		"body": "getBanReason( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBans": {
		"prefix": "getBans",
		"body": "getBans(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanSerial": {
		"prefix": "getBanSerial",
		"body": "getBanSerial( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanTime": {
		"prefix": "getBanTime",
		"body": "getBanTime( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBanUsername": {
		"prefix": "getBanUsername",
		"body": "getBanUsername( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBlipColor": {
		"prefix": "getBlipColor",
		"body": "getBlipColor( ${1:blip theBlip} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBlipIcon": {
		"prefix": "getBlipIcon",
		"body": "getBlipIcon( ${1:blip theBlip} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBlipOrdering": {
		"prefix": "getBlipOrdering",
		"body": "getBlipOrdering( ${1:blip theBlip} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBlipSize": {
		"prefix": "getBlipSize",
		"body": "getBlipSize( ${1:blip theBlip} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBlipVisibleDistance": {
		"prefix": "getBlipVisibleDistance",
		"body": "getBlipVisibleDistance( ${1:blip theBlip} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBodyPartName": {
		"prefix": "getBodyPartName",
		"body": "getBodyPartName( ${1:int bodyPartID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCamera": {
		"prefix": "getCamera",
		"body": "getCamera(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCameraInterior": {
		"prefix": "getCameraInterior",
		"body": "getCameraInterior( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCameraTarget": {
		"prefix": "getCameraTarget",
		"body": "getCameraTarget( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCancelReason": {
		"prefix": "getCancelReason",
		"body": "getCancelReason(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getClothesByTypeIndex": {
		"prefix": "getClothesByTypeIndex",
		"body": "getClothesByTypeIndex( ${1:int clothesType}, ${2:int clothesIndex} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getClothesTypeName": {
		"prefix": "getClothesTypeName",
		"body": "getClothesTypeName( ${1:int clothesType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCloudsEnabled": {
		"prefix": "getCloudsEnabled",
		"body": "getCloudsEnabled(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getColorFromString": {
		"prefix": "getColorFromString",
		"body": "getColorFromString( ${1:string theColor} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getControlState": {
		"prefix": "getControlState",
		"body": "getControlState( ${1:player thePlayer}, ${2:string controlName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCursorAlpha": {
		"prefix": "getCursorAlpha",
		"body": "getCursorAlpha(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getDeadPlayers": {
		"prefix": "getDeadPlayers",
		"body": "getDeadPlayers(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getDistanceBetweenPoints2D": {
		"prefix": "getDistanceBetweenPoints2D",
		"body": "getDistanceBetweenPoints2D( ${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getDistanceBetweenPoints3D": {
		"prefix": "getDistanceBetweenPoints3D",
		"body": "getDistanceBetweenPoints3D( ${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getEasingValue": {
		"prefix": "getEasingValue",
		"body": "getEasingValue( ${1:float fProgress}, ${2:string strEasingType }[, ${3:float fEasingPeriod}, ${4:float fEasingAmplitude}, ${5:float fEasingOvershoot}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementAlpha": {
		"prefix": "getElementAlpha",
		"body": "getElementAlpha( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementAttachedOffsets": {
		"prefix": "getElementAttachedOffsets",
		"body": "getElementAttachedOffsets( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementAttachedTo": {
		"prefix": "getElementAttachedTo",
		"body": "getElementAttachedTo( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementByID": {
		"prefix": "getElementByID",
		"body": "getElementByID( ${1:string id }[, ${2:int index = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementByIndex": {
		"prefix": "getElementByIndex",
		"body": "getElementByIndex( ${1:string theType}, ${2:int index} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementChild": {
		"prefix": "getElementChild",
		"body": "getElementChild( ${1:element parent}, ${2:int index} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementChildren": {
		"prefix": "getElementChildren",
		"body": "getElementChildren( ${1:element parent }[, ${2:string theType = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementChildrenCount": {
		"prefix": "getElementChildrenCount",
		"body": "getElementChildrenCount( ${1:element parent} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementCollisionsEnabled": {
		"prefix": "getElementCollisionsEnabled",
		"body": "getElementCollisionsEnabled( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementColShape": {
		"prefix": "getElementColShape",
		"body": "getElementColShape( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementData": {
		"prefix": "getElementData",
		"body": "getElementData( ${1:element theElement}, ${2:string key }[, inherit = true] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementDimension": {
		"prefix": "getElementDimension",
		"body": "getElementDimension( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementHealth": {
		"prefix": "getElementHealth",
		"body": "getElementHealth( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementID": {
		"prefix": "getElementID",
		"body": "getElementID( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementInterior": {
		"prefix": "getElementInterior",
		"body": "getElementInterior( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementModel": {
		"prefix": "getElementModel",
		"body": "getElementModel( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementParent": {
		"prefix": "getElementParent",
		"body": "getElementParent( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementPosition": {
		"prefix": "getElementPosition",
		"body": "getElementPosition( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementRotation": {
		"prefix": "getElementRotation",
		"body": "getElementRotation( ${1:element theElement }[, ${2:string rotOrder = }\"default\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementsByType": {
		"prefix": "getElementsByType",
		"body": "getElementsByType( ${1:string theType}, [ ${2:element startat=getRootElement()} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementsWithinColShape": {
		"prefix": "getElementsWithinColShape",
		"body": "getElementsWithinColShape( ${1:colshape shape}, [ ${2:string elemType = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementSyncer": {
		"prefix": "getElementSyncer",
		"body": "getElementSyncer( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementType": {
		"prefix": "getElementType",
		"body": "getElementType( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementVelocity": {
		"prefix": "getElementVelocity",
		"body": "getElementVelocity( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getElementZoneName": {
		"prefix": "getElementZoneName",
		"body": "getElementZoneName( ${1:element theElement}, [${2:bool citiesonly=false}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getEventHandlers": {
		"prefix": "getEventHandlers",
		"body": "getEventHandlers( ${1:string eventName}, ${2:element attachedTo} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getFarClipDistance": {
		"prefix": "getFarClipDistance",
		"body": "getFarClipDistance(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getFogDistance": {
		"prefix": "getFogDistance",
		"body": "getFogDistance(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getFPSLimit": {
		"prefix": "getFPSLimit",
		"body": "getFPSLimit(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getFunctionsBoundToKey": {
		"prefix": "getFunctionsBoundToKey",
		"body": "getFunctionsBoundToKey( ${1:player thePlayer }, ${2:string theKey} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGameSpeed": {
		"prefix": "getGameSpeed",
		"body": "getGameSpeed(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGameType": {
		"prefix": "getGameType",
		"body": "getGameType(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGarageBoundingBox": {
		"prefix": "getGarageBoundingBox",
		"body": "getGarageBoundingBox( ${1:int garageID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGaragePosition": {
		"prefix": "getGaragePosition",
		"body": "getGaragePosition( ${1:int garageID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGarageSize": {
		"prefix": "getGarageSize",
		"body": "getGarageSize( ${1:int garageID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getGravity": {
		"prefix": "getGravity",
		"body": "getGravity(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getHeatHaze": {
		"prefix": "getHeatHaze",
		"body": "getHeatHaze(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getJetpackMaxHeight": {
		"prefix": "getJetpackMaxHeight",
		"body": "getJetpackMaxHeight(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getJetpackWeaponEnabled": {
		"prefix": "getJetpackWeaponEnabled",
		"body": "getJetpackWeaponEnabled( ${1:string weapon} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getKeyBoundToFunction": {
		"prefix": "getKeyBoundToFunction",
		"body": "getKeyBoundToFunction( ${1:player thePlayer}, ${2:function theFunction} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getLatentEventHandles": {
		"prefix": "getLatentEventHandles",
		"body": "getLatentEventHandles( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getLatentEventStatus": {
		"prefix": "getLatentEventStatus",
		"body": "getLatentEventStatus( ${1:player thePlayer}, ${2:int handle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getLoadedModules": {
		"prefix": "getLoadedModules",
		"body": "getLoadedModules(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getLowLODElement": {
		"prefix": "getLowLODElement",
		"body": "getLowLODElement( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMapName": {
		"prefix": "getMapName",
		"body": "getMapName(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerColor": {
		"prefix": "getMarkerColor",
		"body": "getMarkerColor( ${1:marker theMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerCount": {
		"prefix": "getMarkerCount",
		"body": "getMarkerCount(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerIcon": {
		"prefix": "getMarkerIcon",
		"body": "getMarkerIcon( ${1:marker theMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerSize": {
		"prefix": "getMarkerSize",
		"body": "getMarkerSize( ${1:marker myMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerTarget": {
		"prefix": "getMarkerTarget",
		"body": "getMarkerTarget( ${1:marker theMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMarkerType": {
		"prefix": "getMarkerType",
		"body": "getMarkerType( ${1:marker theMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMaxPlayers": {
		"prefix": "getMaxPlayers",
		"body": "getMaxPlayers(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMinuteDuration": {
		"prefix": "getMinuteDuration",
		"body": "getMinuteDuration(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getModelHandling": {
		"prefix": "getModelHandling",
		"body": "getModelHandling( ${1:int modelId} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getModuleInfo": {
		"prefix": "getModuleInfo",
		"body": "getModuleInfo( ${1:string moduleName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getMoonSize": {
		"prefix": "getMoonSize",
		"body": "getMoonSize(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getNetworkStats": {
		"prefix": "getNetworkStats",
		"body": "getNetworkStats( [ ${1:element thePlayer = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getNetworkUsageData": {
		"prefix": "getNetworkUsageData",
		"body": "getNetworkUsageData(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getObjectMass": {
		"prefix": "getObjectMass",
		"body": "getObjectMass( ${1:object theObject} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getObjectScale": {
		"prefix": "getObjectScale",
		"body": "getObjectScale( ${1:object theObject} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getOcclusionsEnabled": {
		"prefix": "getOcclusionsEnabled",
		"body": "getOcclusionsEnabled(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getOriginalHandling": {
		"prefix": "getOriginalHandling",
		"body": "getOriginalHandling( ${1:int modelID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getOriginalWeaponProperty": {
		"prefix": "getOriginalWeaponProperty",
		"body": "getOriginalWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedAmmoInClip": {
		"prefix": "getPedAmmoInClip",
		"body": "getPedAmmoInClip( ${1:ped thePed }[, ${2:int weaponSlot = current }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedArmor": {
		"prefix": "getPedArmor",
		"body": "getPedArmor( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedCameraRotation": {
		"prefix": "getPedCameraRotation",
		"body": "getPedCameraRotation( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedClothes": {
		"prefix": "getPedClothes",
		"body": "getPedClothes( ${1:ped thePed}, ${2:int clothesType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedContactElement": {
		"prefix": "getPedContactElement",
		"body": "getPedContactElement( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedFightingStyle": {
		"prefix": "getPedFightingStyle",
		"body": "getPedFightingStyle( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedGravity": {
		"prefix": "getPedGravity",
		"body": "getPedGravity( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedOccupiedVehicle": {
		"prefix": "getPedOccupiedVehicle",
		"body": "getPedOccupiedVehicle( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedOccupiedVehicleSeat": {
		"prefix": "getPedOccupiedVehicleSeat",
		"body": "getPedOccupiedVehicleSeat( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedStat": {
		"prefix": "getPedStat",
		"body": "getPedStat( ${1:ped thePed}, ${2:int stat} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedTarget": {
		"prefix": "getPedTarget",
		"body": "getPedTarget( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedTotalAmmo": {
		"prefix": "getPedTotalAmmo",
		"body": "getPedTotalAmmo( ${1:ped thePed}, [ ${2:int weaponSlot = current }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedWalkingStyle": {
		"prefix": "getPedWalkingStyle",
		"body": "getPedWalkingStyle( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedWeapon": {
		"prefix": "getPedWeapon",
		"body": "getPedWeapon( ${1:ped thePed}, [ ${2:int weaponSlot = current }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPedWeaponSlot": {
		"prefix": "getPedWeaponSlot",
		"body": "getPedWeaponSlot( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPerformanceStats": {
		"prefix": "getPerformanceStats",
		"body": "getPerformanceStats( ${1:string category }[, ${2:string options = }\"\", ${3:string filter = }\"\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPickupAmmo": {
		"prefix": "getPickupAmmo",
		"body": "getPickupAmmo( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPickupAmount": {
		"prefix": "getPickupAmount",
		"body": "getPickupAmount( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPickupRespawnInterval": {
		"prefix": "getPickupRespawnInterval",
		"body": "getPickupRespawnInterval( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPickupType": {
		"prefix": "getPickupType",
		"body": "getPickupType( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPickupWeapon": {
		"prefix": "getPickupWeapon",
		"body": "getPickupWeapon( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerAccount": {
		"prefix": "getPlayerAccount",
		"body": "getPlayerAccount( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerACInfo": {
		"prefix": "getPlayerACInfo",
		"body": "getPlayerACInfo( ${1:element thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerAnnounceValue": {
		"prefix": "getPlayerAnnounceValue",
		"body": "getPlayerAnnounceValue( ${1:element thePlayer}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerBlurLevel": {
		"prefix": "getPlayerBlurLevel",
		"body": "getPlayerBlurLevel( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerCount": {
		"prefix": "getPlayerCount",
		"body": "getPlayerCount(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerFromName": {
		"prefix": "getPlayerFromName",
		"body": "getPlayerFromName( ${1:string playerName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerIdleTime": {
		"prefix": "getPlayerIdleTime",
		"body": "getPlayerIdleTime( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerIP": {
		"prefix": "getPlayerIP",
		"body": "getPlayerIP( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerMoney": {
		"prefix": "getPlayerMoney",
		"body": "getPlayerMoney( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerName": {
		"prefix": "getPlayerName",
		"body": "getPlayerName( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerNametagColor": {
		"prefix": "getPlayerNametagColor",
		"body": "getPlayerNametagColor( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerNametagText": {
		"prefix": "getPlayerNametagText",
		"body": "getPlayerNametagText( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerPing": {
		"prefix": "getPlayerPing",
		"body": "getPlayerPing( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerSerial": {
		"prefix": "getPlayerSerial",
		"body": "getPlayerSerial( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayersInTeam": {
		"prefix": "getPlayersInTeam",
		"body": "getPlayersInTeam( ${1:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerTeam": {
		"prefix": "getPlayerTeam",
		"body": "getPlayerTeam( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerVersion": {
		"prefix": "getPlayerVersion",
		"body": "getPlayerVersion( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getPlayerWantedLevel": {
		"prefix": "getPlayerWantedLevel",
		"body": "getPlayerWantedLevel( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRadarAreaColor": {
		"prefix": "getRadarAreaColor",
		"body": "getRadarAreaColor( ${1:radararea theRadararea} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRadarAreaSize": {
		"prefix": "getRadarAreaSize",
		"body": "getRadarAreaSize( ${1:radararea theRadararea} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRainLevel": {
		"prefix": "getRainLevel",
		"body": "getRainLevel(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRandomPlayer": {
		"prefix": "getRandomPlayer",
		"body": "getRandomPlayer(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRealTime": {
		"prefix": "getRealTime",
		"body": "getRealTime( [${1:int seconds = current}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceACLRequests": {
		"prefix": "getResourceACLRequests",
		"body": "getResourceACLRequests( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceConfig": {
		"prefix": "getResourceConfig",
		"body": "getResourceConfig( ${1:string filePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceDynamicElementRoot": {
		"prefix": "getResourceDynamicElementRoot",
		"body": "getResourceDynamicElementRoot( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceExportedFunctions": {
		"prefix": "getResourceExportedFunctions",
		"body": "getResourceExportedFunctions( ${1:resource res} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceFromName": {
		"prefix": "getResourceFromName",
		"body": "getResourceFromName( ${1:string resourceName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceInfo": {
		"prefix": "getResourceInfo",
		"body": "getResourceInfo( ${1:resource theResource}, ${2:string attribute} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceLastStartTime": {
		"prefix": "getResourceLastStartTime",
		"body": "getResourceLastStartTime( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceLoadFailureReason": {
		"prefix": "getResourceLoadFailureReason",
		"body": "getResourceLoadFailureReason( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceLoadTime": {
		"prefix": "getResourceLoadTime",
		"body": "getResourceLoadTime( ${1:resource res} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceMapRootElement": {
		"prefix": "getResourceMapRootElement",
		"body": "getResourceMapRootElement( ${1:resource theResource}, ${2:string mapName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceName": {
		"prefix": "getResourceName",
		"body": "getResourceName( ${1:resource res} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceRootElement": {
		"prefix": "getResourceRootElement",
		"body": "getResourceRootElement( [${1:resource theResource=getThisResource()}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResources": {
		"prefix": "getResources",
		"body": "getResources(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getResourceState": {
		"prefix": "getResourceState",
		"body": "getResourceState( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRootElement": {
		"prefix": "getRootElement",
		"body": "getRootElement(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getRuleValue": {
		"prefix": "getRuleValue",
		"body": "getRuleValue( ${1:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getServerConfigSetting": {
		"prefix": "getServerConfigSetting",
		"body": "getServerConfigSetting( ${1:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getServerHttpPort": {
		"prefix": "getServerHttpPort",
		"body": "getServerHttpPort(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getServerName": {
		"prefix": "getServerName",
		"body": "getServerName(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getServerPassword": {
		"prefix": "getServerPassword",
		"body": "getServerPassword(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getServerPort": {
		"prefix": "getServerPort",
		"body": "getServerPort(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getSkyGradient": {
		"prefix": "getSkyGradient",
		"body": "getSkyGradient(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getSlotFromWeapon": {
		"prefix": "getSlotFromWeapon",
		"body": "getSlotFromWeapon( ${1:int weaponid} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getSunColor": {
		"prefix": "getSunColor",
		"body": "getSunColor(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getSunSize": {
		"prefix": "getSunSize",
		"body": "getSunSize(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTeamColor": {
		"prefix": "getTeamColor",
		"body": "getTeamColor( ${1:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTeamFriendlyFire": {
		"prefix": "getTeamFriendlyFire",
		"body": "getTeamFriendlyFire( ${1:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTeamFromName": {
		"prefix": "getTeamFromName",
		"body": "getTeamFromName( ${1:string teamName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTeamName": {
		"prefix": "getTeamName",
		"body": "getTeamName( ${1:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getThisResource": {
		"prefix": "getThisResource",
		"body": "getThisResource(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTickCount": {
		"prefix": "getTickCount",
		"body": "getTickCount(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTime": {
		"prefix": "getTime",
		"body": "getTime(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTimerDetails": {
		"prefix": "getTimerDetails",
		"body": "getTimerDetails( ${1:timer theTimer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTimers": {
		"prefix": "getTimers",
		"body": "getTimers( [ theTime = nil ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"gettok": {
		"prefix": "gettok",
		"body": "gettok( ${1:string text}, ${2:int tokenNumber}, string / ${3:int separatingCharacter} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTrafficLightState": {
		"prefix": "getTrafficLightState",
		"body": "getTrafficLightState(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTrainDirection": {
		"prefix": "getTrainDirection",
		"body": "getTrainDirection( ${1:vehicle train} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTrainSpeed": {
		"prefix": "getTrainSpeed",
		"body": "getTrainSpeed( ${1:vehicle train} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getTypeIndexFromClothes": {
		"prefix": "getTypeIndexFromClothes",
		"body": "getTypeIndexFromClothes( ${1:string clothesTexture}, ${2:string clothesModel} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getUnbanTime": {
		"prefix": "getUnbanTime",
		"body": "getUnbanTime( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getValidPedModels": {
		"prefix": "getValidPedModels",
		"body": "getValidPedModels(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleColor": {
		"prefix": "getVehicleColor",
		"body": "getVehicleColor( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleCompatibleUpgrades": {
		"prefix": "getVehicleCompatibleUpgrades",
		"body": "getVehicleCompatibleUpgrades( ${1:vehicle theVehicle}, [ ${2:int slot }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleController": {
		"prefix": "getVehicleController",
		"body": "getVehicleController( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleDoorOpenRatio": {
		"prefix": "getVehicleDoorOpenRatio",
		"body": "getVehicleDoorOpenRatio( ${1:vehicle theVehicle}, ${2:int door} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleDoorState": {
		"prefix": "getVehicleDoorState",
		"body": "getVehicleDoorState( ${1:vehicle theVehicle}, ${2:int door} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleEngineState": {
		"prefix": "getVehicleEngineState",
		"body": "getVehicleEngineState( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleHandling": {
		"prefix": "getVehicleHandling",
		"body": "getVehicleHandling( ${1:element theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleHeadLightColor": {
		"prefix": "getVehicleHeadLightColor",
		"body": "getVehicleHeadLightColor( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleLandingGearDown": {
		"prefix": "getVehicleLandingGearDown",
		"body": "getVehicleLandingGearDown( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleLightState": {
		"prefix": "getVehicleLightState",
		"body": "getVehicleLightState( ${1:vehicle theVehicle}, ${2:int light} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleMaxPassengers": {
		"prefix": "getVehicleMaxPassengers",
		"body": "getVehicleMaxPassengers( ${1:vehicle theVehicle }/ ${2:int modelID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleModelFromName": {
		"prefix": "getVehicleModelFromName",
		"body": "getVehicleModelFromName( ${1:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleName": {
		"prefix": "getVehicleName",
		"body": "getVehicleName( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleNameFromModel": {
		"prefix": "getVehicleNameFromModel",
		"body": "getVehicleNameFromModel( ${1:int model} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleOccupant": {
		"prefix": "getVehicleOccupant",
		"body": "getVehicleOccupant( ${1:vehicle theVehicle}, [ ${2:int seat=0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleOccupants": {
		"prefix": "getVehicleOccupants",
		"body": "getVehicleOccupants( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleOverrideLights": {
		"prefix": "getVehicleOverrideLights",
		"body": "getVehicleOverrideLights( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehiclePaintjob": {
		"prefix": "getVehiclePaintjob",
		"body": "getVehiclePaintjob( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehiclePanelState": {
		"prefix": "getVehiclePanelState",
		"body": "getVehiclePanelState( ${1:vehicle theVehicle}, ${2:int panel} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehiclePlateText": {
		"prefix": "getVehiclePlateText",
		"body": "getVehiclePlateText( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleSirenParams": {
		"prefix": "getVehicleSirenParams",
		"body": "getVehicleSirenParams( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleSirens": {
		"prefix": "getVehicleSirens",
		"body": "getVehicleSirens( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleSirensOn": {
		"prefix": "getVehicleSirensOn",
		"body": "getVehicleSirensOn( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehiclesOfType": {
		"prefix": "getVehiclesOfType",
		"body": "getVehiclesOfType( ${1:int model} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleTowedByVehicle": {
		"prefix": "getVehicleTowedByVehicle",
		"body": "getVehicleTowedByVehicle( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleTowingVehicle": {
		"prefix": "getVehicleTowingVehicle",
		"body": "getVehicleTowingVehicle( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleTurnVelocity": {
		"prefix": "getVehicleTurnVelocity",
		"body": "getVehicleTurnVelocity( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleTurretPosition": {
		"prefix": "getVehicleTurretPosition",
		"body": "getVehicleTurretPosition( ${1:vehicle turretVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleType": {
		"prefix": "getVehicleType",
		"body": "getVehicleType( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleUpgradeOnSlot": {
		"prefix": "getVehicleUpgradeOnSlot",
		"body": "getVehicleUpgradeOnSlot( ${1:vehicle theVehicle}, ${2:int slot} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleUpgrades": {
		"prefix": "getVehicleUpgrades",
		"body": "getVehicleUpgrades( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleUpgradeSlotName": {
		"prefix": "getVehicleUpgradeSlotName",
		"body": "getVehicleUpgradeSlotName( ${1:int slot}/upgrade )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleVariant": {
		"prefix": "getVehicleVariant",
		"body": "getVehicleVariant( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVehicleWheelStates": {
		"prefix": "getVehicleWheelStates",
		"body": "getVehicleWheelStates( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getVersion": {
		"prefix": "getVersion",
		"body": "getVersion(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWaterColor": {
		"prefix": "getWaterColor",
		"body": "getWaterColor(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWaterVertexPosition": {
		"prefix": "getWaterVertexPosition",
		"body": "getWaterVertexPosition( ${1:water theWater}, ${2:int vertexIndex} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWaveHeight": {
		"prefix": "getWaveHeight",
		"body": "getWaveHeight(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWeaponIDFromName": {
		"prefix": "getWeaponIDFromName",
		"body": "getWeaponIDFromName( ${1:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWeaponNameFromID": {
		"prefix": "getWeaponNameFromID",
		"body": "getWeaponNameFromID( ${1:int id} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWeaponProperty": {
		"prefix": "getWeaponProperty",
		"body": "getWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWeather": {
		"prefix": "getWeather",
		"body": "getWeather(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getWindVelocity": {
		"prefix": "getWindVelocity",
		"body": "getWindVelocity(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getZoneName": {
		"prefix": "getZoneName",
		"body": "getZoneName( ${1:float x}, ${2:float y}, ${3:float z}, [${4:bool citiesonly=false}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"givePedJetPack": {
		"prefix": "givePedJetPack",
		"body": "givePedJetPack( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"givePlayerMoney": {
		"prefix": "givePlayerMoney",
		"body": "givePlayerMoney( ${1:player thePlayer}, ${2:int amount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"giveWeapon": {
		"prefix": "giveWeapon",
		"body": "giveWeapon( ${1:ped thePlayer}, ${2:int weapon }[, ${3:int ammo=30}, ${4:bool setAsCurrent=false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiEditSetMasked": {
		"prefix": "guiEditSetMasked",
		"body": "guiEditSetMasked( ${1:element theElement}, ${2:bool status} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListGetColumnTitle": {
		"prefix": "guiGridListGetColumnTitle",
		"body": "guiGridListGetColumnTitle( ${1:element guiGridlist}, ${2:int columnIndex} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListGetHorizontalScrollPosition": {
		"prefix": "guiGridListGetHorizontalScrollPosition",
		"body": "guiGridListGetHorizontalScrollPosition( ${1:element guiGridlist} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListGetVerticalScrollPosition": {
		"prefix": "guiGridListGetVerticalScrollPosition",
		"body": "guiGridListGetVerticalScrollPosition( ${1:element guiGridlist} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListSetColumnTitle": {
		"prefix": "guiGridListSetColumnTitle",
		"body": "guiGridListSetColumnTitle( ${1:element guiGridlist}, ${2:int columnIndex}, ${3:string title} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListSetHorizontalScrollPosition": {
		"prefix": "guiGridListSetHorizontalScrollPosition",
		"body": "guiGridListSetHorizontalScrollPosition( ${1:element guiGridlist}, ${2:float fPosition} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiGridListSetVerticalScrollPosition": {
		"prefix": "guiGridListSetVerticalScrollPosition",
		"body": "guiGridListSetVerticalScrollPosition( ${1:element guiGridlist}, ${2:float fPosition} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiProgressBarGetProgress": {
		"prefix": "guiProgressBarGetProgress",
		"body": "guiProgressBarGetProgress( ${1:progressBar theProgressbar} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiProgressBarSetProgress": {
		"prefix": "guiProgressBarSetProgress",
		"body": "guiProgressBarSetProgress( ${1:progressBar theProgressbar}, ${2:float progress} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollBarGetScrollPosition": {
		"prefix": "guiScrollBarGetScrollPosition",
		"body": "guiScrollBarGetScrollPosition( gui-${1:scrollBar theScrollBar} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollBarSetScrollPosition": {
		"prefix": "guiScrollBarSetScrollPosition",
		"body": "guiScrollBarSetScrollPosition( gui-${1:scrollBar theScrollBar}, ${2:float amount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollPaneGetHorizontalScrollPosition": {
		"prefix": "guiScrollPaneGetHorizontalScrollPosition",
		"body": "guiScrollPaneGetHorizontalScrollPosition( ${1:element horizontalScrollPane} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollPaneGetVerticalScrollPosition": {
		"prefix": "guiScrollPaneGetVerticalScrollPosition",
		"body": "guiScrollPaneGetVerticalScrollPosition( ${1:element verticalScrollPane} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollPaneSetHorizontalScrollPosition": {
		"prefix": "guiScrollPaneSetHorizontalScrollPosition",
		"body": "guiScrollPaneSetHorizontalScrollPosition( ${1:element horizontalScrollPane}, ${2:float position} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"guiScrollPaneSetVerticalScrollPosition": {
		"prefix": "guiScrollPaneSetVerticalScrollPosition",
		"body": "guiScrollPaneSetVerticalScrollPosition( ${1:element verticalScrollPane}, ${2:float position} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"hasObjectPermissionTo": {
		"prefix": "hasObjectPermissionTo",
		"body": "hasObjectPermissionTo( string / ${1:element theObject}, ${2:string theAction }[, ${3:bool defaultPermission = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpClear": {
		"prefix": "httpClear",
		"body": "httpClear(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpRequestLogin": {
		"prefix": "httpRequestLogin",
		"body": "httpRequestLogin(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpSetResponseCode": {
		"prefix": "httpSetResponseCode",
		"body": "httpSetResponseCode( ${1:int code} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpSetResponseCookie": {
		"prefix": "httpSetResponseCookie",
		"body": "httpSetResponseCookie( ${1:string cookieName}, ${2:string cookieValue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpSetResponseHeader": {
		"prefix": "httpSetResponseHeader",
		"body": "httpSetResponseHeader( ${1:string headerName}, ${2:string headerValue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"httpWrite": {
		"prefix": "httpWrite",
		"body": "httpWrite( ${1:string data }[, ${2:int length}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"interpolateBetween": {
		"prefix": "interpolateBetween",
		"body": "interpolateBetween( ${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float fProgress}, ${8:string strEasingType}, [ ${9:float fEasingPeriod}, ${10:float fEasingAmplitude}, ${11:float fEasingOvershoot }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isBan": {
		"prefix": "isBan",
		"body": "isBan( ${1:ban theBan} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isControlEnabled": {
		"prefix": "isControlEnabled",
		"body": "isControlEnabled( ${1:player thePlayer}, ${2:string control} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isCursorShowing": {
		"prefix": "isCursorShowing",
		"body": "isCursorShowing( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElement": {
		"prefix": "isElement",
		"body": "isElement( ${1:var theValue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementAttached": {
		"prefix": "isElementAttached",
		"body": "isElementAttached( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementCallPropagationEnabled": {
		"prefix": "isElementCallPropagationEnabled",
		"body": "isElementCallPropagationEnabled( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementDoubleSided": {
		"prefix": "isElementDoubleSided",
		"body": "isElementDoubleSided( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementFrozen": {
		"prefix": "isElementFrozen",
		"body": "isElementFrozen( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementInWater": {
		"prefix": "isElementInWater",
		"body": "isElementInWater( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementLowLOD": {
		"prefix": "isElementLowLOD",
		"body": "isElementLowLOD( ${1:element theElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementVisibleTo": {
		"prefix": "isElementVisibleTo",
		"body": "isElementVisibleTo( ${1:element theElement}, ${2:element visibleTo} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementWithinColShape": {
		"prefix": "isElementWithinColShape",
		"body": "isElementWithinColShape( ${1:element theElement}, ${2:colshape theShape} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isElementWithinMarker": {
		"prefix": "isElementWithinMarker",
		"body": "isElementWithinMarker( ${1:element theElement}, ${2:marker theMarker} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isGarageOpen": {
		"prefix": "isGarageOpen",
		"body": "isGarageOpen( ${1:int garageID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isGlitchEnabled": {
		"prefix": "isGlitchEnabled",
		"body": "isGlitchEnabled( ${1:string glitchName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isGuestAccount": {
		"prefix": "isGuestAccount",
		"body": "isGuestAccount( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isInsideRadarArea": {
		"prefix": "isInsideRadarArea",
		"body": "isInsideRadarArea( ${1:radararea theArea}, ${2:float posX}, ${3:float posY} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isKeyBound": {
		"prefix": "isKeyBound",
		"body": "isKeyBound( ${1:player thePlayer}, ${2:string key}, [ ${3:string keyState}, ${4:function handler }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isObjectInACLGroup": {
		"prefix": "isObjectInACLGroup",
		"body": "isObjectInACLGroup( ${1:string theObject}, ${2:aclgroup theGroup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedChoking": {
		"prefix": "isPedChoking",
		"body": "isPedChoking( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedDead": {
		"prefix": "isPedDead",
		"body": "isPedDead( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedDoingGangDriveby": {
		"prefix": "isPedDoingGangDriveby",
		"body": "isPedDoingGangDriveby( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedDucked": {
		"prefix": "isPedDucked",
		"body": "isPedDucked( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedHeadless": {
		"prefix": "isPedHeadless",
		"body": "isPedHeadless( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedInVehicle": {
		"prefix": "isPedInVehicle",
		"body": "isPedInVehicle( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedOnFire": {
		"prefix": "isPedOnFire",
		"body": "isPedOnFire( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPedOnGround": {
		"prefix": "isPedOnGround",
		"body": "isPedOnGround( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPickupSpawned": {
		"prefix": "isPickupSpawned",
		"body": "isPickupSpawned( ${1:pickup thePickup} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPlayerMapForced": {
		"prefix": "isPlayerMapForced",
		"body": "isPlayerMapForced( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isPlayerMuted": {
		"prefix": "isPlayerMuted",
		"body": "isPlayerMuted( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isRadarAreaFlashing": {
		"prefix": "isRadarAreaFlashing",
		"body": "isRadarAreaFlashing( ${1:radararea theRadararea} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isTimer": {
		"prefix": "isTimer",
		"body": "isTimer( ${1:timer theTimer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isTrainDerailable": {
		"prefix": "isTrainDerailable",
		"body": "isTrainDerailable( ${1:vehicle vehicleToCheck} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isTrainDerailed": {
		"prefix": "isTrainDerailed",
		"body": "isTrainDerailed( ${1:vehicle vehicleToCheck} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleBlown": {
		"prefix": "isVehicleBlown",
		"body": "isVehicleBlown( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleDamageProof": {
		"prefix": "isVehicleDamageProof",
		"body": "isVehicleDamageProof( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleFuelTankExplodable": {
		"prefix": "isVehicleFuelTankExplodable",
		"body": "isVehicleFuelTankExplodable( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleLocked": {
		"prefix": "isVehicleLocked",
		"body": "isVehicleLocked( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleOnGround": {
		"prefix": "isVehicleOnGround",
		"body": "isVehicleOnGround( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVehicleTaxiLightOn": {
		"prefix": "isVehicleTaxiLightOn",
		"body": "isVehicleTaxiLightOn( ${1:vehicle taxi} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"isVoiceEnabled": {
		"prefix": "isVoiceEnabled",
		"body": "isVoiceEnabled(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"kickPlayer": {
		"prefix": "kickPlayer",
		"body": "kickPlayer( ${1:player kickedPlayer}, [ ${2:player responsiblePlayer}, ${3:string reason = }\"\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"killPed": {
		"prefix": "killPed",
		"body": "killPed( ${1:ped thePed}, [ ${2:ped theKiller = nil}, ${3:int weapon=255}, ${4:int bodyPart=255}, ${5:bool stealth = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"killTimer": {
		"prefix": "killTimer",
		"body": "killTimer( ${1:timer theTimer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"loadMapData": {
		"prefix": "loadMapData",
		"body": "loadMapData( ${1:xmlnode node}, ${2:element parent} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"logIn": {
		"prefix": "logIn",
		"body": "logIn( ${1:player thePlayer}, ${2:account theAccount}, ${3:string thePassword} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"logOut": {
		"prefix": "logOut",
		"body": "logOut( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"md5": {
		"prefix": "md5",
		"body": "md5( ${1:string str} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"moveObject": {
		"prefix": "moveObject",
		"body": "moveObject( ${1:object theObject}, ${2:int time},                  ${3:float targetx}, ${4:float targety}, ${5:float targetz},                 [ ${6:float moverx}, ${7:float movery}, ${8:float moverz},                  ${9:string strEasingType}, ${10:float fEasingPeriod}, ${11:float fEasingAmplitude}, ${12:float fEasingOvershoot }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"outputChatBox": {
		"prefix": "outputChatBox",
		"body": "outputChatBox( ${1:string text }[, ${2:element visibleTo=getRootElement()}, ${3:int r=231}, ${4:int g=217}, ${5:int b=176}, ${6:bool colorCoded=false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"outputConsole": {
		"prefix": "outputConsole",
		"body": "outputConsole( ${1:string text}, [ ${2:element visibleTo=getRootElement()} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"outputDebugString": {
		"prefix": "outputDebugString",
		"body": "outputDebugString( ${1:string text}, [ ${2:int level=3}, ${3:int red=255}, ${4:int green=255}, ${5:int blue=255} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"outputServerLog": {
		"prefix": "outputServerLog",
		"body": "outputServerLog( ${1:string text} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"playSoundFrontEnd": {
		"prefix": "playSoundFrontEnd",
		"body": "playSoundFrontEnd( ${1:player thePlayer}, ${2:int sound} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"pregFind": {
		"prefix": "pregFind",
		"body": "pregFind( ${1:string subject}, ${2:string pattern }[, int/${3:string flags }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"pregMatch": {
		"prefix": "pregMatch",
		"body": "pregMatch( ${1:string base}, ${2:string pattern }[, int/${3:string flags = 0}, ${4:int maxResults = 100000} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"pregReplace": {
		"prefix": "pregReplace",
		"body": "pregReplace( ${1:string subject}, ${2:string pattern}, ${3:string replacement }[, int/${4:string flags }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"redirectPlayer": {
		"prefix": "redirectPlayer",
		"body": "redirectPlayer( ${1:player thePlayer}, ${2:string serverIP}, ${3:int serverPort}, [ ${4:string serverPassword }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"refreshResources": {
		"prefix": "refreshResources",
		"body": "refreshResources( [ ${1:bool refreshAll = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"reloadBans": {
		"prefix": "reloadBans",
		"body": "reloadBans(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"reloadPedWeapon": {
		"prefix": "reloadPedWeapon",
		"body": "reloadPedWeapon( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeAccount": {
		"prefix": "removeAccount",
		"body": "removeAccount( ${1:account theAccount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeBan": {
		"prefix": "removeBan",
		"body": "removeBan( ${1:ban theBan }[, ${2:player responsibleElement = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeCommandHandler": {
		"prefix": "removeCommandHandler",
		"body": "removeCommandHandler( ${1:string commandName }[, ${2:function handler}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeDebugHook": {
		"prefix": "removeDebugHook",
		"body": "removeDebugHook( ${1:string hookType}, ${2:function callbackFunction} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeElementData": {
		"prefix": "removeElementData",
		"body": "removeElementData( ${1:element theElement}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeEventHandler": {
		"prefix": "removeEventHandler",
		"body": "removeEventHandler( ${1:string eventName}, ${2:element attachedTo}, ${3:function functionVar} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removePedClothes": {
		"prefix": "removePedClothes",
		"body": "removePedClothes( ${1:ped thePed}, ${2:int clothesType}, [ ${3:string clothesTexture}, ${4:string clothesModel }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removePedFromVehicle": {
		"prefix": "removePedFromVehicle",
		"body": "removePedFromVehicle( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removePedJetPack": {
		"prefix": "removePedJetPack",
		"body": "removePedJetPack( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeResourceDefaultSetting": {
		"prefix": "removeResourceDefaultSetting",
		"body": "removeResourceDefaultSetting( ${1:resource theResource}, ${2:string settingName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeResourceFile": {
		"prefix": "removeResourceFile",
		"body": "removeResourceFile( ${1:resource theResource}, ${2:string fileName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeRuleValue": {
		"prefix": "removeRuleValue",
		"body": "removeRuleValue( ${1:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeVehicleSirens": {
		"prefix": "removeVehicleSirens",
		"body": "removeVehicleSirens( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeVehicleUpgrade": {
		"prefix": "removeVehicleUpgrade",
		"body": "removeVehicleUpgrade( ${1:vehicle theVehicle}, ${2:int upgrade} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"removeWorldModel": {
		"prefix": "removeWorldModel",
		"body": "removeWorldModel( ${1:int modelID}, ${2:float radius}, ${3:float x}, ${4:float y}, ${5:float z }[, ${6:int interior = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"renameResource": {
		"prefix": "renameResource",
		"body": "renameResource( ${1:string resourceName}, ${2:string newResourceName}, [ ${3:string organizationalPath }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resendPlayerModInfo": {
		"prefix": "resendPlayerModInfo",
		"body": "resendPlayerModInfo( ${1:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetFarClipDistance": {
		"prefix": "resetFarClipDistance",
		"body": "resetFarClipDistance(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetFogDistance": {
		"prefix": "resetFogDistance",
		"body": "resetFogDistance(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetHeatHaze": {
		"prefix": "resetHeatHaze",
		"body": "resetHeatHaze(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetMapInfo": {
		"prefix": "resetMapInfo",
		"body": "resetMapInfo( [${1:player thePlayer = getRootElement()}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetMoonSize": {
		"prefix": "resetMoonSize",
		"body": "resetMoonSize(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetRainLevel": {
		"prefix": "resetRainLevel",
		"body": "resetRainLevel(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetSkyGradient": {
		"prefix": "resetSkyGradient",
		"body": "resetSkyGradient(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetSunColor": {
		"prefix": "resetSunColor",
		"body": "resetSunColor(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetSunSize": {
		"prefix": "resetSunSize",
		"body": "resetSunSize(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetTimer": {
		"prefix": "resetTimer",
		"body": "resetTimer( ${1:timer theTimer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetVehicleExplosionTime": {
		"prefix": "resetVehicleExplosionTime",
		"body": "resetVehicleExplosionTime( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetVehicleIdleTime": {
		"prefix": "resetVehicleIdleTime",
		"body": "resetVehicleIdleTime( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetWaterColor": {
		"prefix": "resetWaterColor",
		"body": "resetWaterColor(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetWaterLevel": {
		"prefix": "resetWaterLevel",
		"body": "resetWaterLevel(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"resetWindVelocity": {
		"prefix": "resetWindVelocity",
		"body": "resetWindVelocity(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"respawnObject": {
		"prefix": "respawnObject",
		"body": "respawnObject( ${1:object theObject} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"respawnVehicle": {
		"prefix": "respawnVehicle",
		"body": "respawnVehicle( ${1:vehicle theVehicle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"restartResource": {
		"prefix": "restartResource",
		"body": "restartResource( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"restoreAllWorldModels": {
		"prefix": "restoreAllWorldModels",
		"body": "restoreAllWorldModels(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"restoreWorldModel": {
		"prefix": "restoreWorldModel",
		"body": "restoreWorldModel( ${1:int modelID}, ${2:float radius}, ${3:float x}, ${4:float y}, ${5:float z }[, ${6:int iInterior = }-1 ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"saveMapData": {
		"prefix": "saveMapData",
		"body": "saveMapData( ${1:xmlnode node}, ${2:element baseElement }[, ${3:bool childrenOnly = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"set": {
		"prefix": "set",
		"body": "set( ${1:string settingName}, ${2:var value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setAccountData": {
		"prefix": "setAccountData",
		"body": "setAccountData( ${1:account theAccount}, ${2:string key}, ${3:string value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setAccountPassword": {
		"prefix": "setAccountPassword",
		"body": "setAccountPassword( ${1:account theAccount}, ${2:string password}, ${2: string passwordType=\"plaintext\"} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setAircraftMaxHeight": {
		"prefix": "setAircraftMaxHeight",
		"body": "setAircraftMaxHeight( ${1:float Height} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setAircraftMaxVelocity": {
		"prefix": "setAircraftMaxVelocity",
		"body": "setAircraftMaxVelocity( ${1:float velocity} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBanAdmin": {
		"prefix": "setBanAdmin",
		"body": "setBanAdmin( ${1:ban theBan}, ${2:string theAdmin} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBanReason": {
		"prefix": "setBanReason",
		"body": "setBanReason( ${1:ban theBan}, ${2:string theReason} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBlipColor": {
		"prefix": "setBlipColor",
		"body": "setBlipColor( ${1:blip theBlip}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBlipIcon": {
		"prefix": "setBlipIcon",
		"body": "setBlipIcon( ${1:blip theBlip}, ${2:int icon} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBlipOrdering": {
		"prefix": "setBlipOrdering",
		"body": "setBlipOrdering( ${1:blip theBlip}, ${2:int ordering} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBlipSize": {
		"prefix": "setBlipSize",
		"body": "setBlipSize( ${1:blip theBlip}, ${2:int iconSize} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setBlipVisibleDistance": {
		"prefix": "setBlipVisibleDistance",
		"body": "setBlipVisibleDistance( ${1:blip theBlip}, ${2:float theDistance} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setCameraInterior": {
		"prefix": "setCameraInterior",
		"body": "setCameraInterior( ${1:player thePlayer}, ${2:int interior} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setCameraMatrix": {
		"prefix": "setCameraMatrix",
		"body": "setCameraMatrix( ${1:player thePlayer}, ${2:float positionX}, ${3:float positionY}, ${4:float positionZ }[, ${5:float lookAtX}, ${6:float lookAtY}, ${7:float lookAtZ}, ${8:float roll = 0}, ${9:float fov = 70} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setCameraTarget": {
		"prefix": "setCameraTarget",
		"body": "setCameraTarget( ${1:player thePlayer }[, ${2:player target = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setCloudsEnabled": {
		"prefix": "setCloudsEnabled",
		"body": "setCloudsEnabled( ${1:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setControlState": {
		"prefix": "setControlState",
		"body": "setControlState( ${1:player thePlayer}, ${2:string control}, ${3:bool state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setCursorAlpha": {
		"prefix": "setCursorAlpha",
		"body": "setCursorAlpha( ${1:int alpha} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementAlpha": {
		"prefix": "setElementAlpha",
		"body": "setElementAlpha( ${1:element theElement}, ${2:int alpha} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementAttachedOffsets": {
		"prefix": "setElementAttachedOffsets",
		"body": "setElementAttachedOffsets( ${1:element theElement}, [ ${2:float xPosOffset}, ${3:float yPosOffset}, ${4:float zPosOffset}, ${5:float xRotOffset}, ${6:float yRotOffset}, ${7:float zRotOffset }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementCallPropagationEnabled": {
		"prefix": "setElementCallPropagationEnabled",
		"body": "setElementCallPropagationEnabled( ${1:element theElement}, ${2:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementCollisionsEnabled": {
		"prefix": "setElementCollisionsEnabled",
		"body": "setElementCollisionsEnabled( ${1:element theElement}, ${2:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementData": {
		"prefix": "setElementData",
		"body": "setElementData( ${1:element theElement}, ${2:string key}, ${3:var value }[, ${4:bool synchronize = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementDimension": {
		"prefix": "setElementDimension",
		"body": "setElementDimension( ${1:element theElement}, ${2:int dimension} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementDoubleSided": {
		"prefix": "setElementDoubleSided",
		"body": "setElementDoubleSided( ${1:element theElement}, ${2:bool enable} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementFrozen": {
		"prefix": "setElementFrozen",
		"body": "setElementFrozen( ${1:element theElement}, ${2:bool freezeStatus} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementHealth": {
		"prefix": "setElementHealth",
		"body": "setElementHealth( ${1:element theElement}, ${2:float newHealth} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementID": {
		"prefix": "setElementID",
		"body": "setElementID( ${1:element theElement}, ${2:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementInterior": {
		"prefix": "setElementInterior",
		"body": "setElementInterior( ${1:element theElement}, ${2:int interior }[, ${3:float x}, ${4:float y}, ${5:float z}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementModel": {
		"prefix": "setElementModel",
		"body": "setElementModel( ${1:element theElement}, ${2:int model} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementParent": {
		"prefix": "setElementParent",
		"body": "setElementParent( ${1:element theElement}, ${2:element parent} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementPosition": {
		"prefix": "setElementPosition",
		"body": "setElementPosition( ${1:element theElement}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:bool warp = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementRotation": {
		"prefix": "setElementRotation",
		"body": "setElementRotation( ${1:element theElement}, ${2:float rotX}, ${3:float rotY}, ${4:float rotZ }[, ${5:string rotOrder = }\"default\", ${6:bool conformPedRotation = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementSyncer": {
		"prefix": "setElementSyncer",
		"body": "setElementSyncer( ${1:element theElement}, ${2:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementVelocity": {
		"prefix": "setElementVelocity",
		"body": "setElementVelocity( ${1:element theElement}, ${2:float speedX}, ${3:float speedY}, ${4:float speedZ} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setElementVisibleTo": {
		"prefix": "setElementVisibleTo",
		"body": "setElementVisibleTo( ${1:element theElement}, ${2:element visibleTo}, ${3:bool visible} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setFarClipDistance": {
		"prefix": "setFarClipDistance",
		"body": "setFarClipDistance( ${1:float distance} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setFogDistance": {
		"prefix": "setFogDistance",
		"body": "setFogDistance( ${1:float distance} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setFPSLimit": {
		"prefix": "setFPSLimit",
		"body": "setFPSLimit( ${1:int fpsLimit} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setGameSpeed": {
		"prefix": "setGameSpeed",
		"body": "setGameSpeed( ${1:float value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setGameType": {
		"prefix": "setGameType",
		"body": "setGameType( ${1:string gameType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setGarageOpen": {
		"prefix": "setGarageOpen",
		"body": "setGarageOpen( ${1:int garageID}, ${2:bool open} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setGlitchEnabled": {
		"prefix": "setGlitchEnabled",
		"body": "setGlitchEnabled( ${1:string glitchName}, ${2:bool enable} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setGravity": {
		"prefix": "setGravity",
		"body": "setGravity( ${1:float level} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setHeatHaze": {
		"prefix": "setHeatHaze",
		"body": "setHeatHaze( ${1:int intensity}, [ ${2:int randomShift = 0}, ${3:int speedMin = 12}, ${4:int speedMax = 18}, ${5:int scanSizeX = 75}, ${6:int scanSizeY = 80}, ${7:int renderSizeX = 80}, ${8:int renderSizeY = 85}, ${9:bool bShowInside = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setInteriorSoundsEnabled": {
		"prefix": "setInteriorSoundsEnabled",
		"body": "setInteriorSoundsEnabled( ${1:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setJetpackMaxHeight": {
		"prefix": "setJetpackMaxHeight",
		"body": "setJetpackMaxHeight( ${1:float Height} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setJetpackWeaponEnabled": {
		"prefix": "setJetpackWeaponEnabled",
		"body": "setJetpackWeaponEnabled( ${1:string weapon}, ${2:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setLowLODElement": {
		"prefix": "setLowLODElement",
		"body": "setLowLODElement( ${1:element theElement}, ${2:element lowLODElement} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMapName": {
		"prefix": "setMapName",
		"body": "setMapName( ${1:string mapName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMarkerColor": {
		"prefix": "setMarkerColor",
		"body": "setMarkerColor( ${1:marker theMarker}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMarkerIcon": {
		"prefix": "setMarkerIcon",
		"body": "setMarkerIcon( ${1:marker theMarker}, ${2:string icon} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMarkerSize": {
		"prefix": "setMarkerSize",
		"body": "setMarkerSize( ${1:marker theMarker}, ${2:float size} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMarkerTarget": {
		"prefix": "setMarkerTarget",
		"body": "setMarkerTarget( ${1:marker theMarker}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMarkerType": {
		"prefix": "setMarkerType",
		"body": "setMarkerType( ${1:marker theMarker}, ${2:string markerType} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMaxPlayers": {
		"prefix": "setMaxPlayers",
		"body": "setMaxPlayers( ${1:int slots} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMinuteDuration": {
		"prefix": "setMinuteDuration",
		"body": "setMinuteDuration( ${1:int milliseconds} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setModelHandling": {
		"prefix": "setModelHandling",
		"body": "setModelHandling( ${1:int modelId}, [ ${2:string property}, ${3:var value }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setMoonSize": {
		"prefix": "setMoonSize",
		"body": "setMoonSize( ${1:int size} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setObjectMass": {
		"prefix": "setObjectMass",
		"body": "setObjectMass( ${1:object theObject}, ${2:float mass} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setObjectScale": {
		"prefix": "setObjectScale",
		"body": "setObjectScale( ${1:object theObject}, ${2:float scale }[, ${3:float scaleY}, ${4:float scaleZ }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setOcclusionsEnabled": {
		"prefix": "setOcclusionsEnabled",
		"body": "setOcclusionsEnabled( ${1:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedAnimation": {
		"prefix": "setPedAnimation",
		"body": "setPedAnimation( ${1:ped thePed }[, ${2:string block=nil}, ${3:string anim=nil}, ${4:int time=}-1, ${5:bool loop=true}, ${6:bool updatePosition=true}, ${7:bool interruptable=true}, ${8:bool freezeLastFrame = true}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedAnimationProgress": {
		"prefix": "setPedAnimationProgress",
		"body": "setPedAnimationProgress( ${1:ped thePed }[, ${2:string anim}, ${3:float progress}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedArmor": {
		"prefix": "setPedArmor",
		"body": "setPedArmor( ${1:ped thePed}, ${2:float armor} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedChoking": {
		"prefix": "setPedChoking",
		"body": "setPedChoking( ${1:ped thePed}, ${2:bool choking} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedDoingGangDriveby": {
		"prefix": "setPedDoingGangDriveby",
		"body": "setPedDoingGangDriveby( ${1:ped thePed}, ${2:bool state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedFightingStyle": {
		"prefix": "setPedFightingStyle",
		"body": "setPedFightingStyle( ${1:ped thePed}, ${2:int style} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedGravity": {
		"prefix": "setPedGravity",
		"body": "setPedGravity( ${1:ped thePed}, ${2:float gravity} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedHeadless": {
		"prefix": "setPedHeadless",
		"body": "setPedHeadless( ${1:ped thePed}, ${2:bool headState} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedOnFire": {
		"prefix": "setPedOnFire",
		"body": "setPedOnFire( ${1:ped thePed}, ${2:bool isOnFire} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedStat": {
		"prefix": "setPedStat",
		"body": "setPedStat( ${1:ped thePed}, ${2:int stat}, ${3:float value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedWalkingStyle": {
		"prefix": "setPedWalkingStyle",
		"body": "setPedWalkingStyle( ${1:ped thePed}, ${2:int style} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPedWeaponSlot": {
		"prefix": "setPedWeaponSlot",
		"body": "setPedWeaponSlot( ${1:ped thePed}, ${2:int weaponSlot} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPickupRespawnInterval": {
		"prefix": "setPickupRespawnInterval",
		"body": "setPickupRespawnInterval( ${1:pickup thePickup}, ${2:int ms} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPickupType": {
		"prefix": "setPickupType",
		"body": "setPickupType( ${1:pickup thePickup}, ${2:int theType}, ${3:int amount}/weapon/model, [ ${4:int ammo }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerAnnounceValue": {
		"prefix": "setPlayerAnnounceValue",
		"body": "setPlayerAnnounceValue( ${1:element thePlayer}, ${2:string key}, ${3:string value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerBlurLevel": {
		"prefix": "setPlayerBlurLevel",
		"body": "setPlayerBlurLevel( ${1:player thePlayer}, ${2:int level} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerHudComponentVisible": {
		"prefix": "setPlayerHudComponentVisible",
		"body": "setPlayerHudComponentVisible( ${1:player thePlayer}, ${2:string component}, ${3:bool show} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerMoney": {
		"prefix": "setPlayerMoney",
		"body": "setPlayerMoney( ${1:player thePlayer}, ${2:int amount }[, ${3:bool instant = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerMuted": {
		"prefix": "setPlayerMuted",
		"body": "setPlayerMuted( ${1:player thePlayer}, ${2:bool state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerName": {
		"prefix": "setPlayerName",
		"body": "setPlayerName( ${1:player thePlayer}, ${2:string newName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerNametagColor": {
		"prefix": "setPlayerNametagColor",
		"body": "setPlayerNametagColor( ${1:player thePlayer}, ${2:int r}, ${3:int g}, ${4:int b} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerNametagShowing": {
		"prefix": "setPlayerNametagShowing",
		"body": "setPlayerNametagShowing( ${1:player thePlayer}, ${2:bool showing} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerNametagText": {
		"prefix": "setPlayerNametagText",
		"body": "setPlayerNametagText( ${1:player thePlayer}, ${2:string text} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerTeam": {
		"prefix": "setPlayerTeam",
		"body": "setPlayerTeam( ${1:player thePlayer}, ${2:team theTeam} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerVoiceBroadcastTo": {
		"prefix": "setPlayerVoiceBroadcastTo",
		"body": "setPlayerVoiceBroadcastTo( ${1:element thePlayer}, ${2:mixed broadcastTo} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerVoiceIgnoreFrom": {
		"prefix": "setPlayerVoiceIgnoreFrom",
		"body": "setPlayerVoiceIgnoreFrom( ${1:element thePlayer}, ${2:mixed ignoreFrom} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setPlayerWantedLevel": {
		"prefix": "setPlayerWantedLevel",
		"body": "setPlayerWantedLevel( ${1:player thePlayer}, ${2:int stars} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setRadarAreaColor": {
		"prefix": "setRadarAreaColor",
		"body": "setRadarAreaColor( ${1:radararea theRadarArea}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setRadarAreaFlashing": {
		"prefix": "setRadarAreaFlashing",
		"body": "setRadarAreaFlashing( ${1:radararea theRadarArea}, ${2:bool flash} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setRadarAreaSize": {
		"prefix": "setRadarAreaSize",
		"body": "setRadarAreaSize( ${1:radararea theRadararea}, ${2:float x}, ${3:float y} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setRainLevel": {
		"prefix": "setRainLevel",
		"body": "setRainLevel( ${1:float level} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setResourceDefaultSetting": {
		"prefix": "setResourceDefaultSetting",
		"body": "setResourceDefaultSetting( ${1:resource theResource}, ${2:string settingName}, string/int/${3:float settingValue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setResourceInfo": {
		"prefix": "setResourceInfo",
		"body": "setResourceInfo( ${1:resource theResource}, ${2:string attribute}, ${3:string value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setRuleValue": {
		"prefix": "setRuleValue",
		"body": "setRuleValue( ${1:string key}, ${2:string value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setServerConfigSetting": {
		"prefix": "setServerConfigSetting",
		"body": "setServerConfigSetting( ${1:string name}, ${2:string value}, [ ${3:bool bSave = false }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setServerPassword": {
		"prefix": "setServerPassword",
		"body": "setServerPassword( ${1:string thePassword} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setSkyGradient": {
		"prefix": "setSkyGradient",
		"body": "setSkyGradient( [ ${1:int topRed = 0}, ${2:int topGreen = 0}, ${3:int topBlue = 0}, ${4:int bottomRed = 0}, ${5:int bottomGreen = 0}, ${6:int bottomBlue = 0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setSunColor": {
		"prefix": "setSunColor",
		"body": "setSunColor( ${1:int aRed}, ${2:int aGreen}, ${3:int aBlue}, ${4:int bRed}, ${5:int bGreen}, ${6:int bBlue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setSunSize": {
		"prefix": "setSunSize",
		"body": "setSunSize( ${1:int Size} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTeamColor": {
		"prefix": "setTeamColor",
		"body": "setTeamColor( ${1:team theTeam}, ${2:int colorR}, ${3:int colorG}, ${4:int colorB} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTeamFriendlyFire": {
		"prefix": "setTeamFriendlyFire",
		"body": "setTeamFriendlyFire( ${1:team theTeam }, ${2:bool friendlyFire} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTeamName": {
		"prefix": "setTeamName",
		"body": "setTeamName( ${1:team theTeam}, ${2:string newName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTime": {
		"prefix": "setTime",
		"body": "setTime( ${1:int hour}, ${2:int minute} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTimer": {
		"prefix": "setTimer",
		"body": "setTimer( ${1:function theFunction}, ${2:int timeInterval}, ${3:int timesToExecute}, [ ${4:var arguments}... ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrafficLightsLocked": {
		"prefix": "setTrafficLightsLocked",
		"body": "setTrafficLightsLocked( ${1:bool toggle} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrafficLightState": {
		"prefix": "setTrafficLightState",
		"body": "setTrafficLightState( ${1:int state })${2:bool setTrafficLightState }( ${3:string state })${4:bool setTrafficLightState }( ${5:string colorNS}, ${6:string colorEW} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrainDerailable": {
		"prefix": "setTrainDerailable",
		"body": "setTrainDerailable( ${1:vehicle derailableVehicle}, ${2:bool derailable} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrainDerailed": {
		"prefix": "setTrainDerailed",
		"body": "setTrainDerailed( ${1:vehicle vehicleToDerail}, ${2:bool derailed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrainDirection": {
		"prefix": "setTrainDirection",
		"body": "setTrainDirection( ${1:vehicle train}, ${2:bool clockwise} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setTrainSpeed": {
		"prefix": "setTrainSpeed",
		"body": "setTrainSpeed( ${1:vehicle train}, ${2:float speed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setUnbanTime": {
		"prefix": "setUnbanTime",
		"body": "setUnbanTime( ${1:ban theBan}, ${2:int theTime} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleAdjustableProperty": {
		"prefix": "setVehicleAdjustableProperty",
		"body": "setVehicleAdjustableProperty( ${1:element theVehicle}, ${2:int value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleColor": {
		"prefix": "setVehicleColor",
		"body": "setVehicleColor( ${1:vehicle theVehicle}, ${2:int r1}, ${3:int g1}, ${4:int b1}, [${5:int r2}, ${6:int g2}, ${7:int b2},] [${8:int r3}, ${9:int g3}, ${10:int b3},] [${11:int r4}, ${12:int g4}, ${13:int b4}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleDamageProof": {
		"prefix": "setVehicleDamageProof",
		"body": "setVehicleDamageProof( ${1:vehicle theVehicle}, ${2:bool damageProof} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleDirtLevel": {
		"prefix": "setVehicleDirtLevel",
		"body": "setVehicleDirtLevel( ${1:vehicle theVehicle}, ${2:int dirtLevel} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleDoorOpenRatio": {
		"prefix": "setVehicleDoorOpenRatio",
		"body": "setVehicleDoorOpenRatio( ${1:vehicle theVehicle}, ${2:int door}, ${3:float ratio }[, ${4:int time = 0}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleDoorState": {
		"prefix": "setVehicleDoorState",
		"body": "setVehicleDoorState( ${1:vehicle theVehicle}, ${2:int door}, ${3:int state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleDoorsUndamageable": {
		"prefix": "setVehicleDoorsUndamageable",
		"body": "setVehicleDoorsUndamageable( ${1:vehicle theVehicle}, ${2:bool state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleEngineState": {
		"prefix": "setVehicleEngineState",
		"body": "setVehicleEngineState( ${1:vehicle theVehicle}, ${2:bool engineState} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleFuelTankExplodable": {
		"prefix": "setVehicleFuelTankExplodable",
		"body": "setVehicleFuelTankExplodable( ${1:vehicle theVehicle}, ${2:bool explodable} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleHandling": {
		"prefix": "setVehicleHandling",
		"body": "setVehicleHandling( ${1:element theVehicle}, ${2:string property}, ${3:var value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleHeadLightColor": {
		"prefix": "setVehicleHeadLightColor",
		"body": "setVehicleHeadLightColor( ${1:vehicle theVehicle}, ${2:int red}, ${3:int green}, ${4:int blue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleIdleRespawnDelay": {
		"prefix": "setVehicleIdleRespawnDelay",
		"body": "setVehicleIdleRespawnDelay( ${1:vehicle theVehicle}, ${2:int timeDelay} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleLandingGearDown": {
		"prefix": "setVehicleLandingGearDown",
		"body": "setVehicleLandingGearDown( ${1:vehicle theVehicle}, ${2:bool gearState} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleLightState": {
		"prefix": "setVehicleLightState",
		"body": "setVehicleLightState( ${1:vehicle theVehicle}, ${2:int light}, ${3:int state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleLocked": {
		"prefix": "setVehicleLocked",
		"body": "setVehicleLocked( ${1:vehicle theVehicle}, ${2:bool locked} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleOverrideLights": {
		"prefix": "setVehicleOverrideLights",
		"body": "setVehicleOverrideLights( ${1:vehicle theVehicle}, ${2:int value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehiclePaintjob": {
		"prefix": "setVehiclePaintjob",
		"body": "setVehiclePaintjob( ${1:vehicle theVehicle}, ${2:int value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehiclePanelState": {
		"prefix": "setVehiclePanelState",
		"body": "setVehiclePanelState( ${1:vehicle theVehicle}, ${2:int panelID}, ${3:int state} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehiclePlateText": {
		"prefix": "setVehiclePlateText",
		"body": "setVehiclePlateText( ${1:element theVehicle}, ${2:string numberplate} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleRespawnDelay": {
		"prefix": "setVehicleRespawnDelay",
		"body": "setVehicleRespawnDelay( ${1:vehicle theVehicle}, ${2:int timeDelay} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleRespawnPosition": {
		"prefix": "setVehicleRespawnPosition",
		"body": "setVehicleRespawnPosition( ${1:vehicle theVehicle}, ${2:float x}, ${3:float y}, ${4:float z}, [${5:float rx}, ${6:float ry}, ${7:float rz }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleSirens": {
		"prefix": "setVehicleSirens",
		"body": "setVehicleSirens( ${1:vehicle theVehicle}, ${2:int sirenPoint}, ${3:float posX}, ${4:float posY}, ${5:float posZ}, ${6:float red}, ${7:float green}, ${8:float blue}, [${9:float alpha = 255}, ${10:float minAlpha = 0.0}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleSirensOn": {
		"prefix": "setVehicleSirensOn",
		"body": "setVehicleSirensOn( ${1:vehicle theVehicle }, ${2:bool sirensOn} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleTaxiLightOn": {
		"prefix": "setVehicleTaxiLightOn",
		"body": "setVehicleTaxiLightOn( ${1:vehicle taxi}, ${2:bool LightState} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleTurnVelocity": {
		"prefix": "setVehicleTurnVelocity",
		"body": "setVehicleTurnVelocity( ${1:vehicle theVehicle}, ${2:float rx}, ${3:float ry}, ${4:float rz} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleTurretPosition": {
		"prefix": "setVehicleTurretPosition",
		"body": "setVehicleTurretPosition( ${1:vehicle turretVehicle}, ${2:float positionX}, ${3:float positionY} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleVariant": {
		"prefix": "setVehicleVariant",
		"body": "setVehicleVariant( ${1:vehicle theVehicle }[, ${2:int variant1}, ${3:int variant2 }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setVehicleWheelStates": {
		"prefix": "setVehicleWheelStates",
		"body": "setVehicleWheelStates( ${1:vehicle theVehicle}, ${2:int frontLeft}, [ ${3:int rearLeft = }-1, ${4:int frontRight = }-1, ${5:int rearRight = }-1 ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWaterColor": {
		"prefix": "setWaterColor",
		"body": "setWaterColor( ${1:int red}, ${2:int green}, ${3:int blue}, [ ${4:int alpha = 200} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWaterLevel": {
		"prefix": "setWaterLevel",
		"body": "setWaterLevel( [${1:water theWater},] ${2:float level })${3:bool setWaterLevel }( ${4:float level }[, ${5:bool includeWaterFeatures = true}, ${6:bool includeWaterElements = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWaterVertexPosition": {
		"prefix": "setWaterVertexPosition",
		"body": "setWaterVertexPosition( ${1:water theWater}, ${2:int vertexIndex}, ${3:int x}, ${4:int y}, ${5:float z} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWaveHeight": {
		"prefix": "setWaveHeight",
		"body": "setWaveHeight( ${1:float height} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWeaponAmmo": {
		"prefix": "setWeaponAmmo",
		"body": "setWeaponAmmo( ${1:player thePlayer}, ${2:int weapon}, ${3:int totalAmmo}, [${4:int ammoInClip = 0}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWeaponProperty": {
		"prefix": "setWeaponProperty",
		"body": "setWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property}, int/${5:float theValue} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWeather": {
		"prefix": "setWeather",
		"body": "setWeather( ${1:int weatherID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWeatherBlended": {
		"prefix": "setWeatherBlended",
		"body": "setWeatherBlended( ${1:int weatherID} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"setWindVelocity": {
		"prefix": "setWindVelocity",
		"body": "setWindVelocity( ${1:float velocityX}, ${2:float velocityY}, ${3:float velocityZ} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"sha256": {
		"prefix": "sha256",
		"body": "sha256( ${1:string str} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"showChat": {
		"prefix": "showChat",
		"body": "showChat( ${1:bool show} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"showCursor": {
		"prefix": "showCursor",
		"body": "showCursor( ${1:player thePlayer}, ${2:bool show}, [ ${3:bool toggleControls = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"showPlayerHudComponent": {
		"prefix": "showPlayerHudComponent",
		"body": "showPlayerHudComponent( ${1:player thePlayer}, ${2:string component}, ${3:bool show} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"shutdown": {
		"prefix": "shutdown",
		"body": "shutdown( ${1:string reason} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"spawnPlayer": {
		"prefix": "spawnPlayer",
		"body": "spawnPlayer( ${1:player thePlayer}, ${2:float x}, ${3:float y}, ${4:float z}, [ ${5:int rotation = 0}, ${6:int skinID = 0}, ${7:int interior = 0}, ${8:int dimension = 0}, ${9:team theTeam = nil }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"spawnVehicle": {
		"prefix": "spawnVehicle",
		"body": "spawnVehicle( ${1:vehicle theVehicle}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rx}, ${6:float ry}, ${7:float rz }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"split": {
		"prefix": "split",
		"body": "split( ${1:string stringToSplit}, string / ${2:int separatingChar} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"startResource": {
		"prefix": "startResource",
		"body": "startResource( ${1:resource resourceToStart}, [${2:bool persistent = false}, ${3:bool startIncludedResources = true}, ${4:bool loadServerConfigs = true}, ${5:bool loadMaps = true}, ${6:bool loadServerScripts = true}, ${7:bool loadHTML = true}, ${8:bool loadClientConfigs = true}, ${9:bool loadClientScripts = true}, ${10:bool loadFiles = true}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"stopObject": {
		"prefix": "stopObject",
		"body": "stopObject( ${1:object theobject} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"stopResource": {
		"prefix": "stopResource",
		"body": "stopResource( ${1:resource theResource} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"takeAllWeapons": {
		"prefix": "takeAllWeapons",
		"body": "takeAllWeapons( ${1:ped thePed} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"takePlayerMoney": {
		"prefix": "takePlayerMoney",
		"body": "takePlayerMoney( ${1:player thePlayer}, ${2:int amount} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"takePlayerScreenShot": {
		"prefix": "takePlayerScreenShot",
		"body": "takePlayerScreenShot( ${1:player thePlayer}, ${2:int width}, ${3:int height }[ , ${4:string tag = }\"\", ${5:int quality = 30}, ${6:int maxBandwith = 5000} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"takeWeapon": {
		"prefix": "takeWeapon",
		"body": "takeWeapon( ${1:player thePlayer}, ${2:int weaponId }[, ${3:int ammo }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"teaDecode": {
		"prefix": "teaDecode",
		"body": "teaDecode( ${1:string data}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"teaEncode": {
		"prefix": "teaEncode",
		"body": "teaEncode( ${1:string data}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textCreateDisplay": {
		"prefix": "textCreateDisplay",
		"body": "textCreateDisplay(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textCreateTextItem": {
		"prefix": "textCreateTextItem",
		"body": "textCreateTextItem( ${1:string text}, ${2:float x}, ${3:float y}, [${4:string priority}, ${5:int red = 255}, ${6:int green = 255}, ${7:int blue = 255}, ${8:int alpha = 255}, ${9:float scale = 1}, ${10:string alignX = }\"left\", ${11:string alignY = }\"top\", ${12:int shadowAlpha = 0}] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDestroyDisplay": {
		"prefix": "textDestroyDisplay",
		"body": "textDestroyDisplay( ${1:textdisplay display} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDestroyTextItem": {
		"prefix": "textDestroyTextItem",
		"body": "textDestroyTextItem( ${1:textitem theTextitem} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayAddObserver": {
		"prefix": "textDisplayAddObserver",
		"body": "textDisplayAddObserver( ${1:textdisplay display}, ${2:player playerToAdd} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayAddText": {
		"prefix": "textDisplayAddText",
		"body": "textDisplayAddText( ${1:textdisplay displayToAddTo}, ${2:textitem itemToAdd} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayGetObservers": {
		"prefix": "textDisplayGetObservers",
		"body": "textDisplayGetObservers( ${1:textdisplay theDisplay} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayIsObserver": {
		"prefix": "textDisplayIsObserver",
		"body": "textDisplayIsObserver( ${1:textdisplay display}, ${2:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayRemoveObserver": {
		"prefix": "textDisplayRemoveObserver",
		"body": "textDisplayRemoveObserver( ${1:textdisplay display}, ${2:player playerToRemove} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textDisplayRemoveText": {
		"prefix": "textDisplayRemoveText",
		"body": "textDisplayRemoveText( ${1:textdisplay displayToRemoveFrom}, ${2:textitem itemToRemove} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemGetColor": {
		"prefix": "textItemGetColor",
		"body": "textItemGetColor( ${1:textitem theTextItem} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemGetPosition": {
		"prefix": "textItemGetPosition",
		"body": "textItemGetPosition( ${1:textitem theTextItem} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemGetPriority": {
		"prefix": "textItemGetPriority",
		"body": "textItemGetPriority( ${1:textitem textitemToCheck} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemGetScale": {
		"prefix": "textItemGetScale",
		"body": "textItemGetScale( ${1:textitem theTextitem} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemGetText": {
		"prefix": "textItemGetText",
		"body": "textItemGetText( ${1:textitem theTextitem} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemSetColor": {
		"prefix": "textItemSetColor",
		"body": "textItemSetColor( ${1:textitem theTextItem}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemSetPosition": {
		"prefix": "textItemSetPosition",
		"body": "textItemSetPosition( ${1:textitem theTextItem}, ${2:float x}, ${3:float y} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemSetPriority": {
		"prefix": "textItemSetPriority",
		"body": "textItemSetPriority( ${1:textitem theTextItem}, ${2:string priority} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemSetScale": {
		"prefix": "textItemSetScale",
		"body": "textItemSetScale( ${1:textitem theTextitem}, ${2:float scale} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"textItemSetText": {
		"prefix": "textItemSetText",
		"body": "textItemSetText( ${1:textitem theTextitem}, ${2:string text} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"toggleAllControls": {
		"prefix": "toggleAllControls",
		"body": "toggleAllControls( ${1:player thePlayer}, ${2:bool enabled}, [ ${3:bool gtaControls = true}, ${4:bool mtaControls = true }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"toggleControl": {
		"prefix": "toggleControl",
		"body": "toggleControl( ${1:player thePlayer}, ${2:string control}, ${3:bool enabled} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"toggleVehicleRespawn": {
		"prefix": "toggleVehicleRespawn",
		"body": "toggleVehicleRespawn( ${1:vehicle theVehicle}, ${2:bool Respawn} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"toJSON": {
		"prefix": "toJSON",
		"body": "toJSON( ${1:var value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"triggerClientEvent": {
		"prefix": "triggerClientEvent",
		"body": "triggerClientEvent( [table/${1:element sendTo=getRootElement()}], ${2:string name}, ${3:element sourceElement}, [arguments...] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"triggerEvent": {
		"prefix": "triggerEvent",
		"body": "triggerEvent( ${1:string eventName}, ${2:element baseElement}, [ ${3:var argument1}, ... ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"triggerLatentClientEvent": {
		"prefix": "triggerLatentClientEvent",
		"body": "triggerLatentClientEvent( [table/${1:element sendTo=getRootElement()},] ${2:string name}, [${3:int bandwidth=50000},] [${4:bool persist=false},] ${5:element theElement}, [arguments...] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"unbindKey": {
		"prefix": "unbindKey",
		"body": "unbindKey( ${1:player thePlayer}, ${2:string key}, ${3:string keyState}, ${4:string command })${5:bool unbindKey }( ${6:player thePlayer}, ${7:string key}, [ ${8:string keyState}, ${9:function handler  }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"updateResourceACLRequest": {
		"prefix": "updateResourceACLRequest",
		"body": "updateResourceACLRequest( ${1:resource theResource}, ${2:string rightName}, ${3:bool access }[, ${4:string byWho = }\"\" ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"usePickup": {
		"prefix": "usePickup",
		"body": "usePickup( ${1:pickup thePickup}, ${2:player thePlayer} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"utfChar": {
		"prefix": "utfChar",
		"body": "utfChar( ${1:int characterCode} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"utfCode": {
		"prefix": "utfCode",
		"body": "utfCode( ${1:string theString} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"utfLen": {
		"prefix": "utfLen",
		"body": "utfLen( ${1:string theString} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"utfSeek": {
		"prefix": "utfSeek",
		"body": "utfSeek( ${1:string theString}, ${2:int position} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"utfSub": {
		"prefix": "utfSub",
		"body": "utfSub( ${1:string theString}, ${2:int Start}, ${3:int End} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"warpPedIntoVehicle": {
		"prefix": "warpPedIntoVehicle",
		"body": "warpPedIntoVehicle( ${1:ped thePed}, ${2:vehicle theVehicle}, [ ${3:int seat=0} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"wasEventCancelled": {
		"prefix": "wasEventCancelled",
		"body": "wasEventCancelled(  )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlCopyFile": {
		"prefix": "xmlCopyFile",
		"body": "xmlCopyFile( ${1:xmlnode nodeToCopy}, ${2:string newFilePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlCreateChild": {
		"prefix": "xmlCreateChild",
		"body": "xmlCreateChild( ${1:xmlnode parentNode}, ${2:string tagName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlCreateFile": {
		"prefix": "xmlCreateFile",
		"body": "xmlCreateFile( ${1:string filePath}, ${2:string rootNodeName} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlDestroyNode": {
		"prefix": "xmlDestroyNode",
		"body": "xmlDestroyNode( ${1:xmlnode theXMLNode} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlFindChild": {
		"prefix": "xmlFindChild",
		"body": "xmlFindChild( ${1:xmlnode parent}, ${2:string tagName}, ${3:int index} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlLoadFile": {
		"prefix": "xmlLoadFile",
		"body": "xmlLoadFile( ${1:string filePath} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetAttribute": {
		"prefix": "xmlNodeGetAttribute",
		"body": "xmlNodeGetAttribute( ${1:xmlnode node}, ${2:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetAttributes": {
		"prefix": "xmlNodeGetAttributes",
		"body": "xmlNodeGetAttributes( ${1:xmlnode node} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetChildren": {
		"prefix": "xmlNodeGetChildren",
		"body": "xmlNodeGetChildren( ${1:xmlnode parent}, [ ${2:int index }] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetName": {
		"prefix": "xmlNodeGetName",
		"body": "xmlNodeGetName( ${1:xmlnode node} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetParent": {
		"prefix": "xmlNodeGetParent",
		"body": "xmlNodeGetParent( ${1:xmlnode node} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeGetValue": {
		"prefix": "xmlNodeGetValue",
		"body": "xmlNodeGetValue( ${1:xmlnode theXMLNode} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeSetAttribute": {
		"prefix": "xmlNodeSetAttribute",
		"body": "xmlNodeSetAttribute( ${1:xmlnode node}, ${2:string name}, string/${3:float value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeSetName": {
		"prefix": "xmlNodeSetName",
		"body": "xmlNodeSetName( ${1:xmlnode node}, ${2:string name} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlNodeSetValue": {
		"prefix": "xmlNodeSetValue",
		"body": "xmlNodeSetValue( ${1:xmlnode theXMLNode}, ${2:string value} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlSaveFile": {
		"prefix": "xmlSaveFile",
		"body": "xmlSaveFile( ${1:xmlnode rootNode} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"xmlUnloadFile": {
		"prefix": "xmlUnloadFile",
		"body": "xmlUnloadFile( ${1:xmlnode node} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"addCommandHandler": {
		"prefix": "addCommandHandler",
		"body": "addCommandHandler( ${1:string commandName}, ${2:function handlerFunction}, [${3:bool restricted = false}, ${4:bool caseSensitive = true}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"addDebugHook": {
		"prefix": "addDebugHook",
		"body": "addDebugHook( ${1:string hookType}, ${2:function callbackFunction}[, ${3:table nameList }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"addEvent": {
		"prefix": "addEvent",
		"body": "addEvent( ${1:string eventName }[, ${2:bool allowRemoteTrigger = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"addEventHandler": {
		"prefix": "addEventHandler",
		"body": "addEventHandler( ${1:string eventName}, ${2:element attachedTo}, ${3:function handlerFunction}, [ ${4:bool getPropagated = true}, ${5:string priority = }\"normal\" ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"addPedClothes": {
		"prefix": "addPedClothes",
		"body": "addPedClothes( ${1:ped thePed}, ${2:string clothesTexture}, ${3:string clothesModel}, ${4:int clothesType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"addVehicleUpgrade": {
		"prefix": "addVehicleUpgrade",
		"body": "addVehicleUpgrade( ${1:vehicle theVehicle}, ${2:int upgrade} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"areTrafficLightsLocked": {
		"prefix": "areTrafficLightsLocked",
		"body": "areTrafficLightsLocked(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"attachElements": {
		"prefix": "attachElements",
		"body": "attachElements( ${1:element theElement}, ${2:element theAttachToElement}, [ ${3:float xPosOffset}, ${4:float yPosOffset}, ${5:float zPosOffset}, ${6:float xRotOffset}, ${7:float yRotOffset}, ${8:float zRotOffset }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"attachTrailerToVehicle": {
		"prefix": "attachTrailerToVehicle",
		"body": "attachTrailerToVehicle( ${1:vehicle theVehicle}, ${2:vehicle theTrailer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"base64Decode": {
		"prefix": "base64Decode",
		"body": "base64Decode( ${1:string data} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"base64Encode": {
		"prefix": "base64Encode",
		"body": "base64Encode( ${1:string data} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"blowVehicle": {
		"prefix": "blowVehicle",
		"body": "blowVehicle( ${1:vehicle vehicleToBlow}, [ ${2:bool explode=true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"call": {
		"prefix": "call",
		"body": "call( ${1:resource theResource}, ${2:string theFunction}, [ arguments... ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"cancelEvent": {
		"prefix": "cancelEvent",
		"body": "cancelEvent(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"cancelLatentEvent": {
		"prefix": "cancelLatentEvent",
		"body": "cancelLatentEvent( ${1:player thePlayer}, ${2:int handle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"canPedBeKnockedOffBike": {
		"prefix": "canPedBeKnockedOffBike",
		"body": "canPedBeKnockedOffBike( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"countPlayersInTeam": {
		"prefix": "countPlayersInTeam",
		"body": "countPlayersInTeam( ${1:team theTeam} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createBlip": {
		"prefix": "createBlip",
		"body": "createBlip( ${1:float x}, ${2:float y}, ${3:float z }[, ${4:int icon = 0}, ${5:int size = 2}, ${6:int r = 255}, ${7:int g = 0}, ${8:int b = 0}, ${9:int a = 255}, ${10:int ordering = 0}, ${11:float visibleDistance = 99999.0}, visibleTo = getRootElement( ) ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createBlipAttachedTo": {
		"prefix": "createBlipAttachedTo",
		"body": "createBlipAttachedTo( ${1:element elementToAttachTo}, [${2:int icon=0}, ${3:int size=2}, ${4:int r=255}, ${5:int g=0}, ${6:int b=0}, ${7:int a=255}, ${8:int ordering=0}, ${9:float visibleDistance=99999.0}, visibleTo = getRootElement()] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createBrowser": {
		"prefix": "createBrowser",
		"body": "createBrowser( ${1:int width}, ${2:int height}, ${3:bool isLocal} [, ${4:bool transparent = false} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createColCircle": {
		"prefix": "createColCircle",
		"body": "createColCircle( ${1:float fX}, ${2:float fY}, ${3:float radius} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createColCuboid": {
		"prefix": "createColCuboid",
		"body": "createColCuboid( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fWidth}, ${5:float fDepth}, ${6:float fHeight} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createColPolygon": {
		"prefix": "createColPolygon",
		"body": "createColPolygon( ${1:float fX}, ${2:float fY}, ${3:float fX1}, ${4:float fY1}, ${5:float fX2}, ${6:float fY2}, ${7:float fX3}, ${8:float fY3}, ... )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createColRectangle": {
		"prefix": "createColRectangle",
		"body": "createColRectangle( ${1:float fX}, ${2:float fY}, ${3:float fWidth}, ${4:float fHeight} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createColSphere": {
		"prefix": "createColSphere",
		"body": "createColSphere( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fRadius} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createColTube": {
		"prefix": "createColTube",
		"body": "createColTube( ${1:float fX}, ${2:float fY}, ${3:float fZ}, ${4:float fRadius}, ${5:float fHeight} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createEffect": {
		"prefix": "createEffect",
		"body": "createEffect( ${1:string name}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rX}, ${6:float rY}, ${7:float rZ }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createElement": {
		"prefix": "createElement",
		"body": "createElement( ${1:string elementType}, [ ${2:string elementID = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createExplosion": {
		"prefix": "createExplosion",
		"body": "createExplosion( ${1:float x}, ${2:float y}, ${3:float z}, ${4:int theType }[, ${5:player creator = nil} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createFire": {
		"prefix": "createFire",
		"body": "createFire( ${1:float x}, ${2:float y}, ${3:float z }[, ${4:float size = 1.8} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createLight": {
		"prefix": "createLight",
		"body": "createLight( ${1:int lightType}, ${2:float posX}, ${3:float posY}, ${4:float posZ [}, ${5:float radius = 3}, ${6:int r = 255}, ${7:int g = 0}, ${8:int b = 0}, ${9:float dirX = 0}, ${10:float dirY = 0}, ${11:float dirZ = 0}, ${12:bool createsShadow = false} ] )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"createMarker": {
		"prefix": "createMarker",
		"body": "createMarker( ${1:float x}, ${2:float y}, ${3:float z }[, ${4:string theType = }\"checkpoint\", ${5:float size = 4.0}, ${6:int r = 0}, ${7:int g = 0}, ${8:int b = 255}, ${9:int a = 255}, visibleTo = getRootElement( ) ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createObject": {
		"prefix": "createObject",
		"body": "createObject( ${1:int modelid}, ${2:float x}, ${3:float y}, ${4:float z}, [ ${5:float rx}, ${6:float ry}, ${7:float rz}, ${8:bool isLowLOD = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createPed": {
		"prefix": "createPed",
		"body": "createPed( ${1:int modelid}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rot = 0.0}, ${6:bool synced = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createPickup": {
		"prefix": "createPickup",
		"body": "createPickup( ${1:float x}, ${2:float y}, ${3:float z}, ${4:int theType}, ${5:int amount}/weapon/model, [ ${6:int respawnTime = 30000}, ${7:int ammo = 50} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createProjectile": {
		"prefix": "createProjectile",
		"body": "createProjectile( ${1:element creator}, ${2:int weaponType }[, ${3:float posX}, ${4:float posY}, ${5:float posZ}, ${6:float force = 1.0}, ${7:element target = nil}, ${8:float rotX}, ${9:float rotY}, ${10:float rotZ}, ${11:float velX}, ${12:float velY}, ${13:float velZ}, ${14:int model }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createRadarArea": {
		"prefix": "createRadarArea",
		"body": "createRadarArea( ${1:float leftX}, ${2:float bottomY}, ${3:float sizeX}, ${4:float sizeY},                          [ ${5:int r = 255}, ${6:int g = 0}, ${7:int b = 0}, ${8:int a = 255},                            ${9:element visibleTo = getRootElement()} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createSWATRope": {
		"prefix": "createSWATRope",
		"body": "createSWATRope( ${1:float fx}, ${2:float fy}, ${3:float fZ}, ${4:int duration} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createVehicle": {
		"prefix": "createVehicle",
		"body": "createVehicle( ${1:int model}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:float rx}, ${6:float ry}, ${7:float rz}, ${8:string numberplate}, ${9:bool bDirection}, ${10:int variant1}, ${11:int variant2 }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createWater": {
		"prefix": "createWater",
		"body": "createWater( ${1:int x1}, ${2:int y1}, ${3:float z1}, ${4:int x2}, ${5:int y2}, ${6:float z2}, ${7:int x3}, ${8:int y3}, ${9:float z3 }[, ${10:int x4}, ${11:int y4}, ${12:float z4 }] [, ${13:bool bShallow = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"createWeapon": {
		"prefix": "createWeapon",
		"body": "createWeapon( ${1:string theType}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"destroyElement": {
		"prefix": "destroyElement",
		"body": "destroyElement( ${1:element elementToDestroy} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"detachElements": {
		"prefix": "detachElements",
		"body": "detachElements( ${1:element theElement}, [ ${2:element theAttachToElement }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"detachTrailerFromVehicle": {
		"prefix": "detachTrailerFromVehicle",
		"body": "detachTrailerFromVehicle( ${1:vehicle theVehicle }[, ${2:vehicle theTrailer = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"detonateSatchels": {
		"prefix": "detonateSatchels",
		"body": "detonateSatchels(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"doesPedHaveJetPack": {
		"prefix": "doesPedHaveJetPack",
		"body": "doesPedHaveJetPack( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"downloadFile": {
		"prefix": "downloadFile",
		"body": "downloadFile( ${1:string fileName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxConvertPixels": {
		"prefix": "dxConvertPixels",
		"body": "dxConvertPixels( ${1:string pixels}, ${2:string newFormat }[, ${3:int quality = 80} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxCreateFont": {
		"prefix": "dxCreateFont",
		"body": "dxCreateFont( ${1:string filepath}[, ${2:int size=9}, ${3:bool bold=false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxCreateRenderTarget": {
		"prefix": "dxCreateRenderTarget",
		"body": "dxCreateRenderTarget( ${1:int width}, ${2:int height }[, ${3:bool withAlpha = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxCreateScreenSource": {
		"prefix": "dxCreateScreenSource",
		"body": "dxCreateScreenSource( ${1:int width}, ${2:int height} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxCreateShader": {
		"prefix": "dxCreateShader",
		"body": "dxCreateShader( ${1:string filepath }[, ${2:float priority = 0}, ${3:float maxDistance = 0}, ${4:bool layered = false}, ${5:string elementTypes = }\"world,vehicle,object,other\" ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxCreateTexture": {
		"prefix": "dxCreateTexture",
		"body": "dxCreateTexture( ${1:string filepath }[, ${2:string textureFormat = }\"argb\", ${3:bool mipmaps = true}, ${4:string textureEdge = }\"wrap\" ] )${5:element dxCreateTexture }( ${6:string pixels }[, ${7:string textureFormat = }\"argb\", ${8:bool mipmaps = true}, ${9:string textureEdge = }\"wrap\" ] )${10:element dxCreateTexture }( ${11:int width}, ${12:int height }[, ${13:string textureFormat = }\"argb\", ${14:string textureEdge = }\"wrap\", ${15:string textureType = }\"2d\", ${16:int depth = 1} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawImage": {
		"prefix": "dxDrawImage",
		"body": "dxDrawImage( ${1:float posX}, ${2:float posY}, ${3:float width}, ${4:float height}, ${5:mixed image }[, ${6:float rotation = 0}, ${7:float rotationCenterOffsetX = 0}, ${8:float rotationCenterOffsetY = 0}, ${9:int color = tocolor(255,255,255,255)}, ${10:bool postGUI = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawImageSection": {
		"prefix": "dxDrawImageSection",
		"body": "dxDrawImageSection( ${1:float posX}, ${2:float posY}, ${3:float width}, ${4:float height}, ${5:float u}, ${6:float v}, ${7:float usize}, ${8:float vsize}, ${9:mixed image}, [ ${10:float rotation = 0}, ${11:float rotationCenterOffsetX = 0}, ${12:float rotationCenterOffsetY = 0}, ${13:int color = white}, ${14:bool postGUI = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawLine": {
		"prefix": "dxDrawLine",
		"body": "dxDrawLine( ${1:int startX}, ${2:int startY}, ${3:int endX}, ${4:int endY}, ${5:int color}, [${6:float width=1}, ${7:bool postGUI=false}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawLine3D": {
		"prefix": "dxDrawLine3D",
		"body": "dxDrawLine3D( ${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ}, ${7:int color}[, ${8:int width}, ${9:bool postGUI }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawMaterialLine3D": {
		"prefix": "dxDrawMaterialLine3D",
		"body": "dxDrawMaterialLine3D( ${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ},                            ${7:element material}, ${8:int width}, [, ${9:int color = white}, ${10:float faceTowardX}, ${11:float faceTowardY}, ${12:float faceTowardZ }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawMaterialSectionLine3D": {
		"prefix": "dxDrawMaterialSectionLine3D",
		"body": "dxDrawMaterialSectionLine3D( ${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ}, ${7:float u}, ${8:float v}, ${9:float usize}, ${10:float vsize},                                   ${11:element material}, ${12:int width }[, ${13:int color = white}, ${14:float faceTowardX}, ${15:float faceTowardY}, ${16:float faceTowardZ }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawRectangle": {
		"prefix": "dxDrawRectangle",
		"body": "dxDrawRectangle( ${1:int startX}, ${2:int startY}, ${3:float width}, ${4:float height }[, ${5:int color = white}, ${6:bool postGUI = false}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxDrawText": {
		"prefix": "dxDrawText",
		"body": "dxDrawText( ${1:string text}, ${2:float left}, ${3:float top }[, ${4:float right=left}, ${5:float bottom=top}, ${6:int color=white},                   ${7:float scale=1}, ${8:mixed font=}\"default\", ${9:string alignX=}\"left\", ${10:string alignY=}\"top\",                  ${11:bool clip=false}, ${12:bool wordBreak=false}, ${13:bool postGUI=false},                  ${14:bool colorCoded=false}, ${15:bool subPixelPositioning=false},                   ${16:float fRotation=0}, ${17:float fRotationCenterX=0}, ${18:float fRotationCenterY=0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetBlendMode": {
		"prefix": "dxGetBlendMode",
		"body": "dxGetBlendMode(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetFontHeight": {
		"prefix": "dxGetFontHeight",
		"body": "dxGetFontHeight( [${1:float scale=1}, ${2:mixed font=}\"default\"] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetMaterialSize": {
		"prefix": "dxGetMaterialSize",
		"body": "dxGetMaterialSize( ${1:element material} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetPixelColor": {
		"prefix": "dxGetPixelColor",
		"body": "dxGetPixelColor( ${1:string pixels}, ${2:int x}, ${3:int y} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetPixelsFormat": {
		"prefix": "dxGetPixelsFormat",
		"body": "dxGetPixelsFormat( ${1:string pixels} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetPixelsSize": {
		"prefix": "dxGetPixelsSize",
		"body": "dxGetPixelsSize( ${1:string pixels} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetStatus": {
		"prefix": "dxGetStatus",
		"body": "dxGetStatus(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetTexturePixels": {
		"prefix": "dxGetTexturePixels",
		"body": "dxGetTexturePixels( [ ${1:int surfaceIndex = 0}, ] ${2:element texture }[, ${3:int x = 0}, ${4:int y = 0}, ${5:int width = 0}, ${6:int height = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxGetTextWidth": {
		"prefix": "dxGetTextWidth",
		"body": "dxGetTextWidth( ${1:string text}, [${2:float scale=1}, ${3:mixed font=}\"default\"] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetAspectRatioAdjustmentEnabled": {
		"prefix": "dxSetAspectRatioAdjustmentEnabled",
		"body": "dxSetAspectRatioAdjustmentEnabled( ${1:bool bEnabled }[, ${2:float sourceRatio = 4}/3 ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetBlendMode": {
		"prefix": "dxSetBlendMode",
		"body": "dxSetBlendMode( ${1:string blendMode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetPixelColor": {
		"prefix": "dxSetPixelColor",
		"body": "dxSetPixelColor( ${1:string pixels}, ${2:int x}, ${3:int y}, ${4:int r}, ${5:int g}, ${6:int b }[, ${7:int a = 255} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetRenderTarget": {
		"prefix": "dxSetRenderTarget",
		"body": "dxSetRenderTarget( [ ${1:element renderTarget}, ${2:bool clear = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetShaderTessellation": {
		"prefix": "dxSetShaderTessellation",
		"body": "dxSetShaderTessellation( ${1:element theShader}, ${2:int tessellationX}, ${3:int tessellationY} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetShaderTransform": {
		"prefix": "dxSetShaderTransform",
		"body": "dxSetShaderTransform( ${1:element theShader},                            ${2:float rotationX}, ${3:float rotationY}, ${4:float rotationZ},                          [ ${5:float rotationCenterOffsetX = 0}, ${6:float rotationCenterOffsetY = 0}, ${7:float rotationCenterOffsetZ = 0},                            ${8:bool bRotationCenterOffsetOriginIsScreen = false},                            ${9:float perspectiveCenterOffsetX = 0}, ${10:float perspectiveCenterOffsetY = 0},                            ${11:bool bPerspectiveCenterOffsetOriginIsScreen = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetShaderValue": {
		"prefix": "dxSetShaderValue",
		"body": "dxSetShaderValue( ${1:element theShader}, ${2:string parameterName}, ${3:mixed value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetTestMode": {
		"prefix": "dxSetTestMode",
		"body": "dxSetTestMode( ${1:string testMode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetTextureEdge": {
		"prefix": "dxSetTextureEdge",
		"body": "dxSetTextureEdge( ${1:texture theTexture}, ${2:string textureEdge }[, ${3:int border}-color] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxSetTexturePixels": {
		"prefix": "dxSetTexturePixels",
		"body": "dxSetTexturePixels( [ ${1:int surfaceIndex = 0}, ] ${2:element texture}, ${3:string pixels }[, ${4:int x = 0}, ${5:int y = 0}, ${6:int width = 0}, ${7:int height = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"dxUpdateScreenSource": {
		"prefix": "dxUpdateScreenSource",
		"body": "dxUpdateScreenSource( ${1:element screenSource }[, ${2:bool resampleNow = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineApplyShaderToWorldTexture": {
		"prefix": "engineApplyShaderToWorldTexture",
		"body": "engineApplyShaderToWorldTexture( ${1:element shader}, ${2:string textureName }[, ${3:element targetElement = nil}, ${4:bool appendLayers = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineGetModelIDFromName": {
		"prefix": "engineGetModelIDFromName",
		"body": "engineGetModelIDFromName( ${1:string modelName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineGetModelLODDistance": {
		"prefix": "engineGetModelLODDistance",
		"body": "engineGetModelLODDistance( ${1:int model} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineGetModelNameFromID": {
		"prefix": "engineGetModelNameFromID",
		"body": "engineGetModelNameFromID( ${1:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineGetModelTextureNames": {
		"prefix": "engineGetModelTextureNames",
		"body": "engineGetModelTextureNames( ${1:string modelId = }\"\" )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineGetVisibleTextureNames": {
		"prefix": "engineGetVisibleTextureNames",
		"body": "engineGetVisibleTextureNames( [ ${1:string nameFilter = }\"*\", ${2:string modelId = }\"\" ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineImportTXD": {
		"prefix": "engineImportTXD",
		"body": "engineImportTXD( ${1:txd texture}, ${2:int model_id} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineLoadCOL": {
		"prefix": "engineLoadCOL",
		"body": "engineLoadCOL( ${1:string col_file} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineLoadDFF": {
		"prefix": "engineLoadDFF",
		"body": "engineLoadDFF( ${1:string dff_file}, ${2:int model_id} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineLoadTXD": {
		"prefix": "engineLoadTXD",
		"body": "engineLoadTXD( ${1:string txd_file }[, ${2:bool filteringEnabled = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineRemoveShaderFromWorldTexture": {
		"prefix": "engineRemoveShaderFromWorldTexture",
		"body": "engineRemoveShaderFromWorldTexture( ${1:element shader}, ${2:string textureName }[, ${3:element targetElement = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineReplaceCOL": {
		"prefix": "engineReplaceCOL",
		"body": "engineReplaceCOL( ${1:col theCol}, ${2:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineReplaceModel": {
		"prefix": "engineReplaceModel",
		"body": "engineReplaceModel( ${1:dff theModel}, ${2:int modelID }[, ${3:bool alphaTransparency = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineRestoreCOL": {
		"prefix": "engineRestoreCOL",
		"body": "engineRestoreCOL( ${1:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineRestoreModel": {
		"prefix": "engineRestoreModel",
		"body": "engineRestoreModel( ${1:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineSetAsynchronousLoading": {
		"prefix": "engineSetAsynchronousLoading",
		"body": "engineSetAsynchronousLoading( ${1:bool enable}, ${2:bool force} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"engineSetModelLODDistance": {
		"prefix": "engineSetModelLODDistance",
		"body": "engineSetModelLODDistance( ${1:int model}, ${2:float distance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"executeBrowserJavascript": {
		"prefix": "executeBrowserJavascript",
		"body": "executeBrowserJavascript( ${1:browser webBrowser}, ${2:string jsCode} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"executeCommandHandler": {
		"prefix": "executeCommandHandler",
		"body": "executeCommandHandler( ${1:string commandName}, ${2:player thePlayer}, [ ${3:string args }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fadeCamera": {
		"prefix": "fadeCamera",
		"body": "fadeCamera( ${1:player thePlayer}, ${2:bool fadeIn}, [ ${3:float timeToFade = 1.0}, ${4:int red = 0}, ${5:int green = 0}, ${6:int blue = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fetchRemote": {
		"prefix": "fetchRemote",
		"body": "fetchRemote( ${1:string URL}[, ${2:int connectionAttempts = 10} ], ${3:callback callbackFunction}, [ ${4:string postData = }\"\", ${5:bool postIsBinary = false}, [ arguments... ] ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileClose": {
		"prefix": "fileClose",
		"body": "fileClose( ${1:file theFile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileCopy": {
		"prefix": "fileCopy",
		"body": "fileCopy( ${1:string filePath}, ${2:string copyToFilePath }[, ${3:bool overwrite = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileCreate": {
		"prefix": "fileCreate",
		"body": "fileCreate( ${1:string filePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileDelete": {
		"prefix": "fileDelete",
		"body": "fileDelete( ${1:string filePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileExists": {
		"prefix": "fileExists",
		"body": "fileExists( ${1:string filePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileFlush": {
		"prefix": "fileFlush",
		"body": "fileFlush( ${1:file theFile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileGetPos": {
		"prefix": "fileGetPos",
		"body": "fileGetPos( ${1:file theFile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileGetSize": {
		"prefix": "fileGetSize",
		"body": "fileGetSize( ${1:file theFile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileIsEOF": {
		"prefix": "fileIsEOF",
		"body": "fileIsEOF( ${1:file theFile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileOpen": {
		"prefix": "fileOpen",
		"body": "fileOpen( ${1:string filePath }[, ${2:bool readOnly = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileRead": {
		"prefix": "fileRead",
		"body": "fileRead( ${1:file theFile}, ${2:int count} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileRename": {
		"prefix": "fileRename",
		"body": "fileRename( ${1:string filePath}, ${2:string newFilePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileSetPos": {
		"prefix": "fileSetPos",
		"body": "fileSetPos( ${1:file theFile}, ${2:int offset} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fileWrite": {
		"prefix": "fileWrite",
		"body": "fileWrite( ${1:file theFile}, ${2:string string1 }[, ${3:string string2}, ${4:string string3 }...] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fireWeapon": {
		"prefix": "fireWeapon",
		"body": "fireWeapon( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fixVehicle": {
		"prefix": "fixVehicle",
		"body": "fixVehicle( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"focusBrowser": {
		"prefix": "focusBrowser",
		"body": "focusBrowser( ${1:browser webBrowser} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"fromJSON": {
		"prefix": "fromJSON",
		"body": "fromJSON( ${1:string json} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddBlood": {
		"prefix": "fxAddBlood",
		"body": "fxAddBlood( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, [${7:int count=1}, ${8:float brightness=1.0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddBulletImpact": {
		"prefix": "fxAddBulletImpact",
		"body": "fxAddBulletImpact( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, [${7:int smokeSize=1}, ${8:int sparkCount=1}, ${9:float smokeIntensity=1.0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddBulletSplash": {
		"prefix": "fxAddBulletSplash",
		"body": "fxAddBulletSplash( ${1:float posX}, ${2:float posY}, ${3:float posZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddDebris": {
		"prefix": "fxAddDebris",
		"body": "fxAddDebris( ${1:float posX}, ${2:float posY}, ${3:float posZ}, [${4:int colorR=255}, ${5:int colorG=0}, ${6:int colorB=0}, ${7:int colorA=255}, ${8:float scale=1.0}, ${9:int count=1}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddFootSplash": {
		"prefix": "fxAddFootSplash",
		"body": "fxAddFootSplash( ${1:float posX}, ${2:float posY}, ${3:float posZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddGlass": {
		"prefix": "fxAddGlass",
		"body": "fxAddGlass( ${1:float posX}, ${2:float posY}, ${3:float posZ}, [${4:int colorR=255}, ${5:int colorG=0}, ${6:int colorB=0}, ${7:int colorA=255}, ${8:float scale=1.0}, ${9:int count=1}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddGunshot": {
		"prefix": "fxAddGunshot",
		"body": "fxAddGunshot( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, [${7:bool includeSparks=true}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddPunchImpact": {
		"prefix": "fxAddPunchImpact",
		"body": "fxAddPunchImpact( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddSparks": {
		"prefix": "fxAddSparks",
		"body": "fxAddSparks( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, [${7:float force=1}, ${8:int count=1},                   ${9:float acrossLineX=0}, ${10:float acrossLineY=0}, ${11:float acrossLineZ=0}, ${12:bool blur=false}, ${13:float spread=1}, ${14:float life=1}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddTankFire": {
		"prefix": "fxAddTankFire",
		"body": "fxAddTankFire( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddTyreBurst": {
		"prefix": "fxAddTyreBurst",
		"body": "fxAddTyreBurst( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddWaterHydrant": {
		"prefix": "fxAddWaterHydrant",
		"body": "fxAddWaterHydrant( ${1:float posX}, ${2:float posY}, ${3:float posZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddWaterSplash": {
		"prefix": "fxAddWaterSplash",
		"body": "fxAddWaterSplash( ${1:float posX}, ${2:float posY}, ${3:float posZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"fxAddWood": {
		"prefix": "fxAddWood",
		"body": "fxAddWood( ${1:float posX}, ${2:float posY}, ${3:float posZ}, ${4:float dirX}, ${5:float dirY}, ${6:float dirZ}, [${7:int count=1}, ${8:float brightness=1.0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getAircraftMaxHeight": {
		"prefix": "getAircraftMaxHeight",
		"body": "getAircraftMaxHeight(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getAircraftMaxVelocity": {
		"prefix": "getAircraftMaxVelocity",
		"body": "getAircraftMaxVelocity(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getAnalogControlState": {
		"prefix": "getAnalogControlState",
		"body": "getAnalogControlState( ${1:string controlName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getAttachedElements": {
		"prefix": "getAttachedElements",
		"body": "getAttachedElements( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBirdsEnabled": {
		"prefix": "getBirdsEnabled",
		"body": "getBirdsEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBlipColor": {
		"prefix": "getBlipColor",
		"body": "getBlipColor( ${1:blip theBlip} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBlipIcon": {
		"prefix": "getBlipIcon",
		"body": "getBlipIcon( ${1:blip theBlip} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBlipOrdering": {
		"prefix": "getBlipOrdering",
		"body": "getBlipOrdering( ${1:blip theBlip} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBlipSize": {
		"prefix": "getBlipSize",
		"body": "getBlipSize( ${1:blip theBlip} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBlipVisibleDistance": {
		"prefix": "getBlipVisibleDistance",
		"body": "getBlipVisibleDistance( ${1:blip theBlip} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBodyPartName": {
		"prefix": "getBodyPartName",
		"body": "getBodyPartName( ${1:int bodyPartID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBoundKeys": {
		"prefix": "getBoundKeys",
		"body": "getBoundKeys( ${1:string command}/control )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getBrowserProperty": {
		"prefix": "getBrowserProperty",
		"body": "getBrowserProperty( ${1:browser theBrowser}, ${2:string key} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBrowserSource": {
		"prefix": "getBrowserSource",
		"body": "getBrowserSource( ${1:browser theBrowser}, ${2:funciton callback} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBrowserTitle": {
		"prefix": "getBrowserTitle",
		"body": "getBrowserTitle( ${1:browser theBrowser} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBrowserURL": {
		"prefix": "getBrowserURL",
		"body": "getBrowserURL( ${1:browser theBrowser} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getBrowserVolume": {
		"prefix": "getBrowserVolume",
		"body": "getBrowserVolume( ${1:browser theBrowser} )",
		"description": "Server-side",
		"scope": "source.lua"
	},
	"getCameraGoggleEffect": {
		"prefix": "getCameraGoggleEffect",
		"body": "getCameraGoggleEffect(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCameraInterior": {
		"prefix": "getCameraInterior",
		"body": "getCameraInterior( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCameraFieldOfView": {
		"prefix": "getCameraFieldOfView",
		"body": "getCameraFieldOfView( ${1:string cameraMode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCameraTarget": {
		"prefix": "getCameraTarget",
		"body": "getCameraTarget( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCameraViewMode": {
		"prefix": "getCameraViewMode",
		"body": "getCameraViewMode(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCameraShakeLevel": {
		"prefix": "getCameraShakeLevel",
		"body": "getCameraShakeLevel(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getChatboxLayout": {
		"prefix": "getChatboxLayout",
		"body": "getChatboxLayout( [ ${1:string CVar }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getClothesByTypeIndex": {
		"prefix": "getClothesByTypeIndex",
		"body": "getClothesByTypeIndex( ${1:int clothesType}, ${2:int clothesIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getClothesTypeName": {
		"prefix": "getClothesTypeName",
		"body": "getClothesTypeName( ${1:int clothesType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCloudsEnabled": {
		"prefix": "getCloudsEnabled",
		"body": "getCloudsEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getColorFromString": {
		"prefix": "getColorFromString",
		"body": "getColorFromString( ${1:string theColor} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCommandsBoundToKey": {
		"prefix": "getCommandsBoundToKey",
		"body": "getCommandsBoundToKey( ${1:string theKey}, ${2:string keyState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getControlState": {
		"prefix": "getControlState",
		"body": "getControlState( ${1:player thePlayer}, ${2:string controlName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getCursorPosition": {
		"prefix": "getCursorPosition",
		"body": "getCursorPosition(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getDevelopmentMode": {
		"prefix": "getDevelopmentMode",
		"body": "getDevelopmentMode(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getDistanceBetweenPoints2D": {
		"prefix": "getDistanceBetweenPoints2D",
		"body": "getDistanceBetweenPoints2D( ${1:float x1}, ${2:float y1}, ${3:float x2}, ${4:float y2} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getDistanceBetweenPoints3D": {
		"prefix": "getDistanceBetweenPoints3D",
		"body": "getDistanceBetweenPoints3D( ${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getEasingValue": {
		"prefix": "getEasingValue",
		"body": "getEasingValue( ${1:float fProgress}, ${2:string strEasingType }[, ${3:float fEasingPeriod}, ${4:float fEasingAmplitude}, ${5:float fEasingOvershoot}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getEffectDensity": {
		"prefix": "getEffectDensity",
		"body": "getEffectDensity( ${1:effect theEffect} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getEffectSpeed": {
		"prefix": "getEffectSpeed",
		"body": "getEffectSpeed( ${1:effect theEffect} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementAlpha": {
		"prefix": "getElementAlpha",
		"body": "getElementAlpha( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementAttachedOffsets": {
		"prefix": "getElementAttachedOffsets",
		"body": "getElementAttachedOffsets( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementAttachedTo": {
		"prefix": "getElementAttachedTo",
		"body": "getElementAttachedTo( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementBoundingBox": {
		"prefix": "getElementBoundingBox",
		"body": "getElementBoundingBox( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementByID": {
		"prefix": "getElementByID",
		"body": "getElementByID( ${1:string id }[, ${2:int index = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementChild": {
		"prefix": "getElementChild",
		"body": "getElementChild( ${1:element parent}, ${2:int index} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementChildren": {
		"prefix": "getElementChildren",
		"body": "getElementChildren( ${1:element parent }[, ${2:string theType = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementChildrenCount": {
		"prefix": "getElementChildrenCount",
		"body": "getElementChildrenCount( ${1:element parent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementCollisionsEnabled": {
		"prefix": "getElementCollisionsEnabled",
		"body": "getElementCollisionsEnabled( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementColShape": {
		"prefix": "getElementColShape",
		"body": "getElementColShape( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementData": {
		"prefix": "getElementData",
		"body": "getElementData( ${1:element theElement}, ${2:string key }[, inherit = true] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementDimension": {
		"prefix": "getElementDimension",
		"body": "getElementDimension( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementDistanceFromCentreOfMassToBaseOfModel": {
		"prefix": "getElementDistanceFromCentreOfMassToBaseOfModel",
		"body": "getElementDistanceFromCentreOfMassToBaseOfModel( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementHealth": {
		"prefix": "getElementHealth",
		"body": "getElementHealth( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementID": {
		"prefix": "getElementID",
		"body": "getElementID( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementInterior": {
		"prefix": "getElementInterior",
		"body": "getElementInterior( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementMatrix": {
		"prefix": "getElementMatrix",
		"body": "getElementMatrix( ${1:element theElement }[, ${2:bool legacy = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementModel": {
		"prefix": "getElementModel",
		"body": "getElementModel( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementParent": {
		"prefix": "getElementParent",
		"body": "getElementParent( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementPosition": {
		"prefix": "getElementPosition",
		"body": "getElementPosition( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementRadius": {
		"prefix": "getElementRadius",
		"body": "getElementRadius( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementRotation": {
		"prefix": "getElementRotation",
		"body": "getElementRotation( ${1:element theElement }[, ${2:string rotOrder = }\"default\" ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementsWithinColShape": {
		"prefix": "getElementsWithinColShape",
		"body": "getElementsWithinColShape( ${1:colshape shape}, [ ${2:string elemType = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementType": {
		"prefix": "getElementType",
		"body": "getElementType( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getElementVelocity": {
		"prefix": "getElementVelocity",
		"body": "getElementVelocity( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getEventHandlers": {
		"prefix": "getEventHandlers",
		"body": "getEventHandlers( ${1:string eventName}, ${2:element attachedTo} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getFarClipDistance": {
		"prefix": "getFarClipDistance",
		"body": "getFarClipDistance(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getFogDistance": {
		"prefix": "getFogDistance",
		"body": "getFogDistance(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getFPSLimit": {
		"prefix": "getFPSLimit",
		"body": "getFPSLimit(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getFunctionsBoundToKey": {
		"prefix": "getFunctionsBoundToKey",
		"body": "getFunctionsBoundToKey( ${1:player thePlayer }, ${2:string theKey} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getGameSpeed": {
		"prefix": "getGameSpeed",
		"body": "getGameSpeed(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getGravity": {
		"prefix": "getGravity",
		"body": "getGravity(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getGroundPosition": {
		"prefix": "getGroundPosition",
		"body": "getGroundPosition( ${1:float x}, ${2:float y}, ${3:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getHeatHaze": {
		"prefix": "getHeatHaze",
		"body": "getHeatHaze(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getHeliBladeCollisionsEnabled": {
		"prefix": "getHeliBladeCollisionsEnabled",
		"body": "getHeliBladeCollisionsEnabled( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getHelicopterRotorSpeed": {
		"prefix": "getHelicopterRotorSpeed",
		"body": "getHelicopterRotorSpeed( ${1:vehicle heli} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getInteriorFurnitureEnabled": {
		"prefix": "getInteriorFurnitureEnabled",
		"body": "getInteriorFurnitureEnabled( ${1:int roomID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getInteriorSoundsEnabled": {
		"prefix": "getInteriorSoundsEnabled",
		"body": "getInteriorSoundsEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getJetpackMaxHeight": {
		"prefix": "getJetpackMaxHeight",
		"body": "getJetpackMaxHeight(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getKeyBoundToCommand": {
		"prefix": "getKeyBoundToCommand",
		"body": "getKeyBoundToCommand( ${1:string command} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getKeyBoundToFunction": {
		"prefix": "getKeyBoundToFunction",
		"body": "getKeyBoundToFunction( ${1:player thePlayer}, ${2:function theFunction} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getKeyState": {
		"prefix": "getKeyState",
		"body": "getKeyState( ${1:string keyName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLatentEventHandles": {
		"prefix": "getLatentEventHandles",
		"body": "getLatentEventHandles( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLatentEventStatus": {
		"prefix": "getLatentEventStatus",
		"body": "getLatentEventStatus( ${1:player thePlayer}, ${2:int handle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLightType": {
		"prefix": "getLightType",
		"body": "getLightType( ${1:light theLight } )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLightRadius": {
		"prefix": "getLightRadius",
		"body": "getLightRadius( ${1:light theLight } )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLightColor": {
		"prefix": "getLightColor",
		"body": "getLightColor( ${1:light theLight } )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLightDirection": {
		"prefix": "getLightDirection",
		"body": "getLightDirection( ${1:light theLight } )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLocalization": {
		"prefix": "getLocalization",
		"body": "getLocalization(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLocalPlayer": {
		"prefix": "getLocalPlayer",
		"body": "getLocalPlayer(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getLowLODElement": {
		"prefix": "getLowLODElement",
		"body": "getLowLODElement( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerColor": {
		"prefix": "getMarkerColor",
		"body": "getMarkerColor( ${1:marker theMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerCount": {
		"prefix": "getMarkerCount",
		"body": "getMarkerCount(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerIcon": {
		"prefix": "getMarkerIcon",
		"body": "getMarkerIcon( ${1:marker theMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerSize": {
		"prefix": "getMarkerSize",
		"body": "getMarkerSize( ${1:marker myMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerTarget": {
		"prefix": "getMarkerTarget",
		"body": "getMarkerTarget( ${1:marker theMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMarkerType": {
		"prefix": "getMarkerType",
		"body": "getMarkerType( ${1:marker theMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMinuteDuration": {
		"prefix": "getMinuteDuration",
		"body": "getMinuteDuration(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getMoonSize": {
		"prefix": "getMoonSize",
		"body": "getMoonSize(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getNetworkStats": {
		"prefix": "getNetworkStats",
		"body": "getNetworkStats(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getNetworkUsageData": {
		"prefix": "getNetworkUsageData",
		"body": "getNetworkUsageData(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getObjectScale": {
		"prefix": "getObjectScale",
		"body": "getObjectScale( ${1:object theObject} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getOcclusionsEnabled": {
		"prefix": "getOcclusionsEnabled",
		"body": "getOcclusionsEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getOriginalHandling": {
		"prefix": "getOriginalHandling",
		"body": "getOriginalHandling( ${1:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getOriginalWeaponProperty": {
		"prefix": "getOriginalWeaponProperty",
		"body": "getOriginalWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedAmmoInClip": {
		"prefix": "getPedAmmoInClip",
		"body": "getPedAmmoInClip( ${1:ped thePed }[, ${2:int weaponSlot = current }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedAnalogControlState": {
		"prefix": "getPedAnalogControlState",
		"body": "getPedAnalogControlState( ${1:ped thePed}, ${2:string controlName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedAnimation": {
		"prefix": "getPedAnimation",
		"body": "getPedAnimation( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedAnimationData": {
		"prefix": "getPedAnimationData",
		"body": "getPedAnimationData( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedArmor": {
		"prefix": "getPedArmor",
		"body": "getPedArmor( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedBonePosition": {
		"prefix": "getPedBonePosition",
		"body": "getPedBonePosition( ${1:ped thePed}, ${2:int bone} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedClothes": {
		"prefix": "getPedClothes",
		"body": "getPedClothes( ${1:ped thePed}, ${2:int clothesType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedContactElement": {
		"prefix": "getPedContactElement",
		"body": "getPedContactElement( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedControlState": {
		"prefix": "getPedControlState",
		"body": "getPedControlState( ${1:ped thePed}, ${2:string control} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedMoveState": {
		"prefix": "getPedMoveState",
		"body": "getPedMoveState( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedOccupiedVehicle": {
		"prefix": "getPedOccupiedVehicle",
		"body": "getPedOccupiedVehicle( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedOxygenLevel": {
		"prefix": "getPedOxygenLevel",
		"body": "getPedOxygenLevel( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedSimplestTask": {
		"prefix": "getPedSimplestTask",
		"body": "getPedSimplestTask( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedStat": {
		"prefix": "getPedStat",
		"body": "getPedStat( ${1:ped thePed}, ${2:int stat} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTarget": {
		"prefix": "getPedTarget",
		"body": "getPedTarget( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTargetCollision": {
		"prefix": "getPedTargetCollision",
		"body": "getPedTargetCollision( ${1:ped targetingPed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTargetEnd": {
		"prefix": "getPedTargetEnd",
		"body": "getPedTargetEnd( ${1:ped targetingPed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTargetStart": {
		"prefix": "getPedTargetStart",
		"body": "getPedTargetStart( ${1:ped targetingPed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTask": {
		"prefix": "getPedTask",
		"body": "getPedTask( ${1:ped thePed}, ${2:string priority}, ${3:int taskType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedTotalAmmo": {
		"prefix": "getPedTotalAmmo",
		"body": "getPedTotalAmmo( ${1:ped thePed}, [ ${2:int weaponSlot = current }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedVoice": {
		"prefix": "getPedVoice",
		"body": "getPedVoice( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedWalkingStyle": {
		"prefix": "getPedWalkingStyle",
		"body": "getPedWalkingStyle( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedWeapon": {
		"prefix": "getPedWeapon",
		"body": "getPedWeapon( ${1:ped thePed}, [ ${2:int weaponSlot = current }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedWeaponMuzzlePosition": {
		"prefix": "getPedWeaponMuzzlePosition",
		"body": "getPedWeaponMuzzlePosition( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPedWeaponSlot": {
		"prefix": "getPedWeaponSlot",
		"body": "getPedWeaponSlot( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPerformanceStats": {
		"prefix": "getPerformanceStats",
		"body": "getPerformanceStats( ${1:string category }[, ${2:string options = }\"\", ${3:string filter = }\"\" ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPickupAmmo": {
		"prefix": "getPickupAmmo",
		"body": "getPickupAmmo( ${1:pickup thePickup} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPickupAmount": {
		"prefix": "getPickupAmount",
		"body": "getPickupAmount( ${1:pickup thePickup} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPickupType": {
		"prefix": "getPickupType",
		"body": "getPickupType( ${1:pickup thePickup} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPickupWeapon": {
		"prefix": "getPickupWeapon",
		"body": "getPickupWeapon( ${1:pickup thePickup} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerBlurLevel": {
		"prefix": "getPlayerBlurLevel",
		"body": "getPlayerBlurLevel( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerFromName": {
		"prefix": "getPlayerFromName",
		"body": "getPlayerFromName( ${1:string playerName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerMapBoundingBox": {
		"prefix": "getPlayerMapBoundingBox",
		"body": "getPlayerMapBoundingBox(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerMoney": {
		"prefix": "getPlayerMoney",
		"body": "getPlayerMoney( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerName": {
		"prefix": "getPlayerName",
		"body": "getPlayerName( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerNametagColor": {
		"prefix": "getPlayerNametagColor",
		"body": "getPlayerNametagColor( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerNametagText": {
		"prefix": "getPlayerNametagText",
		"body": "getPlayerNametagText( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerPing": {
		"prefix": "getPlayerPing",
		"body": "getPlayerPing( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerSerial": {
		"prefix": "getPlayerSerial",
		"body": "getPlayerSerial( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayersInTeam": {
		"prefix": "getPlayersInTeam",
		"body": "getPlayersInTeam( ${1:team theTeam} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerTeam": {
		"prefix": "getPlayerTeam",
		"body": "getPlayerTeam( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getPlayerWantedLevel": {
		"prefix": "getPlayerWantedLevel",
		"body": "getPlayerWantedLevel( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getProjectileCounter": {
		"prefix": "getProjectileCounter",
		"body": "getProjectileCounter( ${1:projectile projectile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getProjectileCreator": {
		"prefix": "getProjectileCreator",
		"body": "getProjectileCreator( ${1:projectile theProjectile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getProjectileForce": {
		"prefix": "getProjectileForce",
		"body": "getProjectileForce( ${1:projectile theProjectile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getProjectileTarget": {
		"prefix": "getProjectileTarget",
		"body": "getProjectileTarget( ${1:projectile theProjectile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getProjectileType": {
		"prefix": "getProjectileType",
		"body": "getProjectileType( ${1:projectile theProjectile} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRadarAreaColor": {
		"prefix": "getRadarAreaColor",
		"body": "getRadarAreaColor( ${1:radararea theRadararea} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRadarAreaSize": {
		"prefix": "getRadarAreaSize",
		"body": "getRadarAreaSize( ${1:radararea theRadararea} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRadioChannel": {
		"prefix": "getRadioChannel",
		"body": "getRadioChannel(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRadioChannelName": {
		"prefix": "getRadioChannelName",
		"body": "getRadioChannelName( ${1:int id} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRainLevel": {
		"prefix": "getRainLevel",
		"body": "getRainLevel(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRealTime": {
		"prefix": "getRealTime",
		"body": "getRealTime( [${1:int seconds = current}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceDynamicElementRoot": {
		"prefix": "getResourceDynamicElementRoot",
		"body": "getResourceDynamicElementRoot( ${1:resource theResource} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceExportedFunctions": {
		"prefix": "getResourceExportedFunctions",
		"body": "getResourceExportedFunctions( ${1:resource res} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceFromName": {
		"prefix": "getResourceFromName",
		"body": "getResourceFromName( ${1:string resourceName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceGUIElement": {
		"prefix": "getResourceGUIElement",
		"body": "getResourceGUIElement( [${1:resource theResource=getThisResource()}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceName": {
		"prefix": "getResourceName",
		"body": "getResourceName( ${1:resource res} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceRootElement": {
		"prefix": "getResourceRootElement",
		"body": "getResourceRootElement( [${1:resource theResource=getThisResource()}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getResourceState": {
		"prefix": "getResourceState",
		"body": "getResourceState( ${1:resource theResource} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getRootElement": {
		"prefix": "getRootElement",
		"body": "getRootElement(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getScreenFromWorldPosition": {
		"prefix": "getScreenFromWorldPosition",
		"body": "getScreenFromWorldPosition( ${1:float x}, ${2:float y}, ${3:float z}, [ ${4:float edgeTolerance=0}, ${5:bool relative=true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSFXStatus": {
		"prefix": "getSFXStatus",
		"body": "getSFXStatus( ${1:string audioContainer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSkyGradient": {
		"prefix": "getSkyGradient",
		"body": "getSkyGradient(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSlotFromWeapon": {
		"prefix": "getSlotFromWeapon",
		"body": "getSlotFromWeapon( ${1:int weaponid} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundBPM": {
		"prefix": "getSoundBPM",
		"body": "getSoundBPM( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundEffects": {
		"prefix": "getSoundEffects",
		"body": "getSoundEffects( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundFFTData": {
		"prefix": "getSoundFFTData",
		"body": "getSoundFFTData( ${1:element sound}, ${2:int iSamples }[, ${3:int iBands = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundLength": {
		"prefix": "getSoundLength",
		"body": "getSoundLength( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundLevelData": {
		"prefix": "getSoundLevelData",
		"body": "getSoundLevelData( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundMaxDistance": {
		"prefix": "getSoundMaxDistance",
		"body": "getSoundMaxDistance( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundMetaTags": {
		"prefix": "getSoundMetaTags",
		"body": "getSoundMetaTags( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundMinDistance": {
		"prefix": "getSoundMinDistance",
		"body": "getSoundMinDistance( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundPan": {
		"prefix": "getSoundPan",
		"body": "getSoundPan( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundPosition": {
		"prefix": "getSoundPosition",
		"body": "getSoundPosition( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundProperties": {
		"prefix": "getSoundProperties",
		"body": "getSoundProperties( ${1:element sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundSpeed": {
		"prefix": "getSoundSpeed",
		"body": "getSoundSpeed( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundVolume": {
		"prefix": "getSoundVolume",
		"body": "getSoundVolume( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSoundWaveData": {
		"prefix": "getSoundWaveData",
		"body": "getSoundWaveData( ${1:element sound}, ${2:int iSamples} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSunColor": {
		"prefix": "getSunColor",
		"body": "getSunColor(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getSunSize": {
		"prefix": "getSunSize",
		"body": "getSunSize(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTeamColor": {
		"prefix": "getTeamColor",
		"body": "getTeamColor( ${1:team theTeam} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTeamFriendlyFire": {
		"prefix": "getTeamFriendlyFire",
		"body": "getTeamFriendlyFire( ${1:team theTeam} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTeamFromName": {
		"prefix": "getTeamFromName",
		"body": "getTeamFromName( ${1:string teamName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTeamName": {
		"prefix": "getTeamName",
		"body": "getTeamName( ${1:team theTeam} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getThisResource": {
		"prefix": "getThisResource",
		"body": "getThisResource(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTickCount": {
		"prefix": "getTickCount",
		"body": "getTickCount(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTime": {
		"prefix": "getTime",
		"body": "getTime(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTimerDetails": {
		"prefix": "getTimerDetails",
		"body": "getTimerDetails( ${1:timer theTimer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTimers": {
		"prefix": "getTimers",
		"body": "getTimers( [ theTime = nil ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"gettok": {
		"prefix": "gettok",
		"body": "gettok( ${1:string text}, ${2:int tokenNumber}, string / ${3:int separatingCharacter} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTrafficLightState": {
		"prefix": "getTrafficLightState",
		"body": "getTrafficLightState(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTrainDirection": {
		"prefix": "getTrainDirection",
		"body": "getTrainDirection( ${1:vehicle train} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTrainSpeed": {
		"prefix": "getTrainSpeed",
		"body": "getTrainSpeed( ${1:vehicle train} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getTypeIndexFromClothes": {
		"prefix": "getTypeIndexFromClothes",
		"body": "getTypeIndexFromClothes( ${1:string clothesTexture}, ${2:string clothesModel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getValidPedModels": {
		"prefix": "getValidPedModels",
		"body": "getValidPedModels(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleAdjustableProperty": {
		"prefix": "getVehicleAdjustableProperty",
		"body": "getVehicleAdjustableProperty( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleColor": {
		"prefix": "getVehicleColor",
		"body": "getVehicleColor( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleCompatibleUpgrades": {
		"prefix": "getVehicleCompatibleUpgrades",
		"body": "getVehicleCompatibleUpgrades( ${1:vehicle theVehicle}, [ ${2:int slot }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleComponentPosition": {
		"prefix": "getVehicleComponentPosition",
		"body": "getVehicleComponentPosition( ${1:vehicle theVehicle}, ${2:string theComponent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleComponentRotation": {
		"prefix": "getVehicleComponentRotation",
		"body": "getVehicleComponentRotation( ${1:vehicle theVehicle}, ${2:string theComponent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleComponents": {
		"prefix": "getVehicleComponents",
		"body": "getVehicleComponents( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleComponentVisible": {
		"prefix": "getVehicleComponentVisible",
		"body": "getVehicleComponentVisible( ${1:vehicle theVehicle}, ${2:string theComponent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleController": {
		"prefix": "getVehicleController",
		"body": "getVehicleController( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleCurrentGear": {
		"prefix": "getVehicleCurrentGear",
		"body": "getVehicleCurrentGear( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleDoorOpenRatio": {
		"prefix": "getVehicleDoorOpenRatio",
		"body": "getVehicleDoorOpenRatio( ${1:vehicle theVehicle}, ${2:int door} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleDoorState": {
		"prefix": "getVehicleDoorState",
		"body": "getVehicleDoorState( ${1:vehicle theVehicle}, ${2:int door} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleEngineState": {
		"prefix": "getVehicleEngineState",
		"body": "getVehicleEngineState( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleGravity": {
		"prefix": "getVehicleGravity",
		"body": "getVehicleGravity( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleHandling": {
		"prefix": "getVehicleHandling",
		"body": "getVehicleHandling( ${1:element theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleHeadLightColor": {
		"prefix": "getVehicleHeadLightColor",
		"body": "getVehicleHeadLightColor( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleLightState": {
		"prefix": "getVehicleLightState",
		"body": "getVehicleLightState( ${1:vehicle theVehicle}, ${2:int light} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleMaxPassengers": {
		"prefix": "getVehicleMaxPassengers",
		"body": "getVehicleMaxPassengers( ${1:vehicle theVehicle }/ ${2:int modelID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleName": {
		"prefix": "getVehicleName",
		"body": "getVehicleName( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleNameFromModel": {
		"prefix": "getVehicleNameFromModel",
		"body": "getVehicleNameFromModel( ${1:int model} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleNitroCount": {
		"prefix": "getVehicleNitroCount",
		"body": "getVehicleNitroCount( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleNitroLevel": {
		"prefix": "getVehicleNitroLevel",
		"body": "getVehicleNitroLevel( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleOccupant": {
		"prefix": "getVehicleOccupant",
		"body": "getVehicleOccupant( ${1:vehicle theVehicle}, [ ${2:int seat=0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleOccupants": {
		"prefix": "getVehicleOccupants",
		"body": "getVehicleOccupants( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleOverrideLights": {
		"prefix": "getVehicleOverrideLights",
		"body": "getVehicleOverrideLights( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehiclePaintjob": {
		"prefix": "getVehiclePaintjob",
		"body": "getVehiclePaintjob( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehiclePanelState": {
		"prefix": "getVehiclePanelState",
		"body": "getVehiclePanelState( ${1:vehicle theVehicle}, ${2:int panel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehiclePlateText": {
		"prefix": "getVehiclePlateText",
		"body": "getVehiclePlateText( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleSirenParams": {
		"prefix": "getVehicleSirenParams",
		"body": "getVehicleSirenParams( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleSirens": {
		"prefix": "getVehicleSirens",
		"body": "getVehicleSirens( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleSirensOn": {
		"prefix": "getVehicleSirensOn",
		"body": "getVehicleSirensOn( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleTowedByVehicle": {
		"prefix": "getVehicleTowedByVehicle",
		"body": "getVehicleTowedByVehicle( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleTowingVehicle": {
		"prefix": "getVehicleTowingVehicle",
		"body": "getVehicleTowingVehicle( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleTurnVelocity": {
		"prefix": "getVehicleTurnVelocity",
		"body": "getVehicleTurnVelocity( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleTurretPosition": {
		"prefix": "getVehicleTurretPosition",
		"body": "getVehicleTurretPosition( ${1:vehicle turretVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleType": {
		"prefix": "getVehicleType",
		"body": "getVehicleType( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleUpgradeOnSlot": {
		"prefix": "getVehicleUpgradeOnSlot",
		"body": "getVehicleUpgradeOnSlot( ${1:vehicle theVehicle}, ${2:int slot} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleUpgrades": {
		"prefix": "getVehicleUpgrades",
		"body": "getVehicleUpgrades( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleUpgradeSlotName": {
		"prefix": "getVehicleUpgradeSlotName",
		"body": "getVehicleUpgradeSlotName( ${1:int slot}/upgrade )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleVariant": {
		"prefix": "getVehicleVariant",
		"body": "getVehicleVariant( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVehicleWheelStates": {
		"prefix": "getVehicleWheelStates",
		"body": "getVehicleWheelStates( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getVersion": {
		"prefix": "getVersion",
		"body": "getVersion(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWaterColor": {
		"prefix": "getWaterColor",
		"body": "getWaterColor(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWaterLevel": {
		"prefix": "getWaterLevel",
		"body": "getWaterLevel( ${1:float posX}, ${2:float posY}, ${3:float posZ }[ , ${4:bool bCheckWaves = false }] )${5:float getWaterLevel }( ${6:water theWater} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWaterVertexPosition": {
		"prefix": "getWaterVertexPosition",
		"body": "getWaterVertexPosition( ${1:water theWater}, ${2:int vertexIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWaveHeight": {
		"prefix": "getWaveHeight",
		"body": "getWaveHeight(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponAmmo": {
		"prefix": "getWeaponAmmo",
		"body": "getWeaponAmmo( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponClipAmmo": {
		"prefix": "getWeaponClipAmmo",
		"body": "getWeaponClipAmmo( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponFiringRate": {
		"prefix": "getWeaponFiringRate",
		"body": "getWeaponFiringRate( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponFlags": {
		"prefix": "getWeaponFlags",
		"body": "getWeaponFlags( ${1:weapon theWeapon}, ${2:string theFlag} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponIDFromName": {
		"prefix": "getWeaponIDFromName",
		"body": "getWeaponIDFromName( ${1:string name} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponNameFromID": {
		"prefix": "getWeaponNameFromID",
		"body": "getWeaponNameFromID( ${1:int id} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponOwner": {
		"prefix": "getWeaponOwner",
		"body": "getWeaponOwner( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponProperty": {
		"prefix": "getWeaponProperty",
		"body": "getWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponState": {
		"prefix": "getWeaponState",
		"body": "getWeaponState( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeaponTarget": {
		"prefix": "getWeaponTarget",
		"body": "getWeaponTarget( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWeather": {
		"prefix": "getWeather",
		"body": "getWeather(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWindVelocity": {
		"prefix": "getWindVelocity",
		"body": "getWindVelocity(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getWorldFromScreenPosition": {
		"prefix": "getWorldFromScreenPosition",
		"body": "getWorldFromScreenPosition( ${1:float x}, ${2:float y}, ${3:float depth} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"getZoneName": {
		"prefix": "getZoneName",
		"body": "getZoneName( ${1:float x}, ${2:float y}, ${3:float z}, [${4:bool citiesonly=false}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"givePlayerMoney": {
		"prefix": "givePlayerMoney",
		"body": "givePlayerMoney( ${1:player thePlayer}, ${2:int amount} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiBringToFront": {
		"prefix": "guiBringToFront",
		"body": "guiBringToFront( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCheckBoxGetSelected": {
		"prefix": "guiCheckBoxGetSelected",
		"body": "guiCheckBoxGetSelected( ${1:element theCheckbox} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCheckBoxSetSelected": {
		"prefix": "guiCheckBoxSetSelected",
		"body": "guiCheckBoxSetSelected( ${1:element theCheckbox}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxAddItem": {
		"prefix": "guiComboBoxAddItem",
		"body": "guiComboBoxAddItem( ${1:element comboBox}, ${2:string value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxClear": {
		"prefix": "guiComboBoxClear",
		"body": "guiComboBoxClear( ${1:element comboBox} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxGetItemText": {
		"prefix": "guiComboBoxGetItemText",
		"body": "guiComboBoxGetItemText( ${1:element comboBox}, ${2:int itemId} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxGetSelected": {
		"prefix": "guiComboBoxGetSelected",
		"body": "guiComboBoxGetSelected( ${1:element comboBox} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxRemoveItem": {
		"prefix": "guiComboBoxRemoveItem",
		"body": "guiComboBoxRemoveItem( ${1:element comboBox}, ${2:int itemId} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxSetItemText": {
		"prefix": "guiComboBoxSetItemText",
		"body": "guiComboBoxSetItemText( ${1:element comboBox}, ${2:int itemId}, ${3:string text} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiComboBoxSetSelected": {
		"prefix": "guiComboBoxSetSelected",
		"body": "guiComboBoxSetSelected( ${1:element comboBox}, ${2:int itemIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateButton": {
		"prefix": "guiCreateButton",
		"body": "guiCreateButton( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool relative}, [ ${7:element parent = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateCheckBox": {
		"prefix": "guiCreateCheckBox",
		"body": "guiCreateCheckBox( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool selected}, ${7:bool relative}, [${8:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateComboBox": {
		"prefix": "guiCreateComboBox",
		"body": "guiCreateComboBox( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string caption}, ${6:bool relative}, [ ${7:element parent = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateEdit": {
		"prefix": "guiCreateEdit",
		"body": "guiCreateEdit( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool relative}, [${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateFont": {
		"prefix": "guiCreateFont",
		"body": "guiCreateFont( ${1:string filepath}[, ${2:int size=9} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateGridList": {
		"prefix": "guiCreateGridList",
		"body": "guiCreateGridList( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:bool relative}, [ ${6:element parent = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateLabel": {
		"prefix": "guiCreateLabel",
		"body": "guiCreateLabel( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool relative}, [${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateMemo": {
		"prefix": "guiCreateMemo",
		"body": "guiCreateMemo( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool relative}, [${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateProgressBar": {
		"prefix": "guiCreateProgressBar",
		"body": "guiCreateProgressBar( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:bool relative}, [${6:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateRadioButton": {
		"prefix": "guiCreateRadioButton",
		"body": "guiCreateRadioButton( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string text}, ${6:bool relative}, [${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateScrollBar": {
		"prefix": "guiCreateScrollBar",
		"body": "guiCreateScrollBar( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:bool horizontal}, ${6:bool relative}, [gui-${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateScrollPane": {
		"prefix": "guiCreateScrollPane",
		"body": "guiCreateScrollPane( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:bool relative}, [gui-${6:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateStaticImage": {
		"prefix": "guiCreateStaticImage",
		"body": "guiCreateStaticImage( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string path}, ${6:bool relative}, [${7:element parent = nil}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateTab": {
		"prefix": "guiCreateTab",
		"body": "guiCreateTab( ${1:string text}, ${2:element parent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateTabPanel": {
		"prefix": "guiCreateTabPanel",
		"body": "guiCreateTabPanel( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:bool relative}, [${6:element parent = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiCreateWindow": {
		"prefix": "guiCreateWindow",
		"body": "guiCreateWindow( ${1:float x}, ${2:float y}, ${3:float width}, ${4:float height}, ${5:string titleBarText}, ${6:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiDeleteTab": {
		"prefix": "guiDeleteTab",
		"body": "guiDeleteTab( ${1:element tabToDelete}, ${2:element tabPanel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiEditGetCaretIndex": {
		"prefix": "guiEditGetCaretIndex",
		"body": "guiEditGetCaretIndex( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiEditSetCaretIndex": {
		"prefix": "guiEditSetCaretIndex",
		"body": "guiEditSetCaretIndex( ${1:element theElement}, ${2:int index} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiEditSetMaxLength": {
		"prefix": "guiEditSetMaxLength",
		"body": "guiEditSetMaxLength( ${1:element theElement}, ${2:int length} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiEditSetReadOnly": {
		"prefix": "guiEditSetReadOnly",
		"body": "guiEditSetReadOnly( ${1:element editField}, ${2:bool status} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetAlpha": {
		"prefix": "guiGetAlpha",
		"body": "guiGetAlpha( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetEnabled": {
		"prefix": "guiGetEnabled",
		"body": "guiGetEnabled( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetFont": {
		"prefix": "guiGetFont",
		"body": "guiGetFont( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetInputEnabled": {
		"prefix": "guiGetInputEnabled",
		"body": "guiGetInputEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetInputMode": {
		"prefix": "guiGetInputMode",
		"body": "guiGetInputMode(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetPosition": {
		"prefix": "guiGetPosition",
		"body": "guiGetPosition( ${1:element guiElement}, ${2:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetProperties": {
		"prefix": "guiGetProperties",
		"body": "guiGetProperties( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetProperty": {
		"prefix": "guiGetProperty",
		"body": "guiGetProperty( ${1:element guiElement}, ${2:string property} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetScreenSize": {
		"prefix": "guiGetScreenSize",
		"body": "guiGetScreenSize(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetSelectedTab": {
		"prefix": "guiGetSelectedTab",
		"body": "guiGetSelectedTab( ${1:element tabPanel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetSize": {
		"prefix": "guiGetSize",
		"body": "guiGetSize( ${1:element theElement}, ${2:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetText": {
		"prefix": "guiGetText",
		"body": "guiGetText( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGetVisible": {
		"prefix": "guiGetVisible",
		"body": "guiGetVisible( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListAddColumn": {
		"prefix": "guiGridListAddColumn",
		"body": "guiGridListAddColumn( ${1:element gridList}, ${2:string title}, ${3:float width} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListAddRow": {
		"prefix": "guiGridListAddRow",
		"body": "guiGridListAddRow( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListAutoSizeColumn": {
		"prefix": "guiGridListAutoSizeColumn",
		"body": "guiGridListAutoSizeColumn( ${1:element gridList}, ${2:int columnIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListClear": {
		"prefix": "guiGridListClear",
		"body": "guiGridListClear( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetColumnCount": {
		"prefix": "guiGridListGetColumnCount",
		"body": "guiGridListGetColumnCount( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetItemColor": {
		"prefix": "guiGridListGetItemColor",
		"body": "guiGridListGetItemColor( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetItemData": {
		"prefix": "guiGridListGetItemData",
		"body": "guiGridListGetItemData( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetItemText": {
		"prefix": "guiGridListGetItemText",
		"body": "guiGridListGetItemText( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetRowCount": {
		"prefix": "guiGridListGetRowCount",
		"body": "guiGridListGetRowCount( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetSelectedCount": {
		"prefix": "guiGridListGetSelectedCount",
		"body": "guiGridListGetSelectedCount( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetSelectedItem": {
		"prefix": "guiGridListGetSelectedItem",
		"body": "guiGridListGetSelectedItem( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListGetSelectedItems": {
		"prefix": "guiGridListGetSelectedItems",
		"body": "guiGridListGetSelectedItems( ${1:element gridList} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListInsertRowAfter": {
		"prefix": "guiGridListInsertRowAfter",
		"body": "guiGridListInsertRowAfter( ${1:element gridList}, ${2:int rowIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListRemoveColumn": {
		"prefix": "guiGridListRemoveColumn",
		"body": "guiGridListRemoveColumn( ${1:element gridList}, ${2:int columnIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListRemoveRow": {
		"prefix": "guiGridListRemoveRow",
		"body": "guiGridListRemoveRow( ${1:element gridList}, ${2:int rowIndex} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetColumnWidth": {
		"prefix": "guiGridListSetColumnWidth",
		"body": "guiGridListSetColumnWidth( ${1:element gridList}, ${2:int columnIndex}, ${3:number width}, ${4:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetItemColor": {
		"prefix": "guiGridListSetItemColor",
		"body": "guiGridListSetItemColor( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex}, ${4:int red}, ${5:int green}, ${6:int blue }[, ${7:int alpha = 255} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetItemData": {
		"prefix": "guiGridListSetItemData",
		"body": "guiGridListSetItemData( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex}, ${4:var data} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetItemText": {
		"prefix": "guiGridListSetItemText",
		"body": "guiGridListSetItemText( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex}, ${4:string text}, ${5:bool section}, ${6:bool number} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetScrollBars": {
		"prefix": "guiGridListSetScrollBars",
		"body": "guiGridListSetScrollBars( ${1:element guiGridlist}, ${2:bool horizontalBar}, ${3:bool verticalBar} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetSelectedItem": {
		"prefix": "guiGridListSetSelectedItem",
		"body": "guiGridListSetSelectedItem( ${1:element gridList}, ${2:int rowIndex}, ${3:int columnIndex }[, ${4:bool bReset = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetSelectionMode": {
		"prefix": "guiGridListSetSelectionMode",
		"body": "guiGridListSetSelectionMode( ${1:guiElement gridlist}, ${2:int mode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiGridListSetSortingEnabled": {
		"prefix": "guiGridListSetSortingEnabled",
		"body": "guiGridListSetSortingEnabled( ${1:element guiGridlist}, ${2:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelGetColor": {
		"prefix": "guiLabelGetColor",
		"body": "guiLabelGetColor( gui-${1:element theLabel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelGetFontHeight": {
		"prefix": "guiLabelGetFontHeight",
		"body": "guiLabelGetFontHeight( ${1:element theLabel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelGetTextExtent": {
		"prefix": "guiLabelGetTextExtent",
		"body": "guiLabelGetTextExtent( ${1:element theLabel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelSetColor": {
		"prefix": "guiLabelSetColor",
		"body": "guiLabelSetColor( ${1:element theElement}, ${2:int red}, ${3:int green}, ${4:int blue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelSetHorizontalAlign": {
		"prefix": "guiLabelSetHorizontalAlign",
		"body": "guiLabelSetHorizontalAlign( ${1:element theLabel}, ${2:string align}, [ ${3:bool wordwrap = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiLabelSetVerticalAlign": {
		"prefix": "guiLabelSetVerticalAlign",
		"body": "guiLabelSetVerticalAlign( ${1:element theLabel}, ${2:string align} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiMemoGetCaretIndex": {
		"prefix": "guiMemoGetCaretIndex",
		"body": "guiMemoGetCaretIndex( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiMemoSetCaretIndex": {
		"prefix": "guiMemoSetCaretIndex",
		"body": "guiMemoSetCaretIndex( gui-${1:memo theMemo}, ${2:int index} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiMemoSetReadOnly": {
		"prefix": "guiMemoSetReadOnly",
		"body": "guiMemoSetReadOnly( gui-${1:memo theMemo}, ${2:bool status} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiMoveToBack": {
		"prefix": "guiMoveToBack",
		"body": "guiMoveToBack( ${1:element guiElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiRadioButtonGetSelected": {
		"prefix": "guiRadioButtonGetSelected",
		"body": "guiRadioButtonGetSelected( ${1:element guiRadioButton} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiRadioButtonSetSelected": {
		"prefix": "guiRadioButtonSetSelected",
		"body": "guiRadioButtonSetSelected( ${1:element guiRadioButton}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiScrollPaneSetScrollBars": {
		"prefix": "guiScrollPaneSetScrollBars",
		"body": "guiScrollPaneSetScrollBars( ${1:element scrollPane}, ${2:bool horizontal}, ${3:bool vertical} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetAlpha": {
		"prefix": "guiSetAlpha",
		"body": "guiSetAlpha( ${1:element guielement}, ${2:float alpha} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetEnabled": {
		"prefix": "guiSetEnabled",
		"body": "guiSetEnabled( ${1:element guiElement}, ${2:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetFont": {
		"prefix": "guiSetFont",
		"body": "guiSetFont( ${1:element guiElement}, ${2:mixed font} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetInputEnabled": {
		"prefix": "guiSetInputEnabled",
		"body": "guiSetInputEnabled( ${1:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetInputMode": {
		"prefix": "guiSetInputMode",
		"body": "guiSetInputMode( ${1:string mode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetPosition": {
		"prefix": "guiSetPosition",
		"body": "guiSetPosition( ${1:element theElement}, ${2:float x}, ${3:float y}, ${4:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetProperty": {
		"prefix": "guiSetProperty",
		"body": "guiSetProperty( ${1:element guiElement}, ${2:string property}, ${3:string value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetSelectedTab": {
		"prefix": "guiSetSelectedTab",
		"body": "guiSetSelectedTab( ${1:element tabPanel}, ${2:element theTab} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetSize": {
		"prefix": "guiSetSize",
		"body": "guiSetSize( ${1:element gui}, ${2:float width}, ${3:float height}, ${4:bool relative} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetText": {
		"prefix": "guiSetText",
		"body": "guiSetText( ${1:element guiElement}, ${2:string text} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiSetVisible": {
		"prefix": "guiSetVisible",
		"body": "guiSetVisible( ${1:element guiElement}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiStaticImageGetNativeSize": {
		"prefix": "guiStaticImageGetNativeSize",
		"body": "guiStaticImageGetNativeSize( ${1:element theImage} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiStaticImageLoadImage": {
		"prefix": "guiStaticImageLoadImage",
		"body": "guiStaticImageLoadImage( ${1:element theElement}, ${2:string filename} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiWindowSetMovable": {
		"prefix": "guiWindowSetMovable",
		"body": "guiWindowSetMovable( ${1:element theElement}, ${2:bool status} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"guiWindowSetSizable": {
		"prefix": "guiWindowSetSizable",
		"body": "guiWindowSetSizable( ${1:element theElement}, ${2:bool status} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"injectBrowserMouseDown": {
		"prefix": "injectBrowserMouseDown",
		"body": "injectBrowserMouseDown( ${1:browser webBrowser}, ${2:string mouseButton} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"injectBrowserMouseMove": {
		"prefix": "injectBrowserMouseMove",
		"body": "injectBrowserMouseMove( ${1:browser webBrowser}, ${2:int posX}, ${3:int posY} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"injectBrowserMouseUp": {
		"prefix": "injectBrowserMouseUp",
		"body": "injectBrowserMouseUp( ${1:browser webBrowser}, ${2:string mouseButton} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"injectBrowserMouseWheel": {
		"prefix": "injectBrowserMouseWheel",
		"body": "injectBrowserMouseWheel( ${1:browser webBrowser}, ${2:int verticalScroll}, ${3:int horizontalScroll} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"interpolateBetween": {
		"prefix": "interpolateBetween",
		"body": "interpolateBetween( ${1:float x1}, ${2:float y1}, ${3:float z1}, ${4:float x2}, ${5:float y2}, ${6:float z2}, ${7:float fProgress}, ${8:string strEasingType}, [ ${9:float fEasingPeriod}, ${10:float fEasingAmplitude}, ${11:float fEasingOvershoot }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isAmbientSoundEnabled": {
		"prefix": "isAmbientSoundEnabled",
		"body": "isAmbientSoundEnabled( ${1:string theType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isBrowserDomainBlocked": {
		"prefix": "isBrowserDomainBlocked",
		"body": "isBrowserDomainBlocked( ${1:string address} [, ${2:bool isURL = false}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isBrowserFocused": {
		"prefix": "isBrowserFocused",
		"body": "isBrowserFocused( ${1:browser webBrowser} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isBrowserLoading": {
		"prefix": "isBrowserLoading",
		"body": "isBrowserLoading( ${1:browser webBrowser} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isChatBoxInputActive": {
		"prefix": "isChatBoxInputActive",
		"body": "isChatBoxInputActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isChatVisible": {
		"prefix": "isChatVisible",
		"body": "isChatVisible(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isConsoleActive": {
		"prefix": "isConsoleActive",
		"body": "isConsoleActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isControlEnabled": {
		"prefix": "isControlEnabled",
		"body": "isControlEnabled( ${1:player thePlayer}, ${2:string control} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isCursorShowing": {
		"prefix": "isCursorShowing",
		"body": "isCursorShowing( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isDebugViewActive": {
		"prefix": "isDebugViewActive",
		"body": "isDebugViewActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElement": {
		"prefix": "isElement",
		"body": "isElement( ${1:var theValue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementAttached": {
		"prefix": "isElementAttached",
		"body": "isElementAttached( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementCollidableWith": {
		"prefix": "isElementCollidableWith",
		"body": "isElementCollidableWith( ${1:element theElement}, ${2:element withElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementDoubleSided": {
		"prefix": "isElementDoubleSided",
		"body": "isElementDoubleSided( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementFrozen": {
		"prefix": "isElementFrozen",
		"body": "isElementFrozen( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementInWater": {
		"prefix": "isElementInWater",
		"body": "isElementInWater( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementLocal": {
		"prefix": "isElementLocal",
		"body": "isElementLocal( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementLowLOD": {
		"prefix": "isElementLowLOD",
		"body": "isElementLowLOD( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementOnScreen": {
		"prefix": "isElementOnScreen",
		"body": "isElementOnScreen( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementStreamable": {
		"prefix": "isElementStreamable",
		"body": "isElementStreamable( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementStreamedIn": {
		"prefix": "isElementStreamedIn",
		"body": "isElementStreamedIn( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementSyncer": {
		"prefix": "isElementSyncer",
		"body": "isElementSyncer( ${1:element theElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementWithinColShape": {
		"prefix": "isElementWithinColShape",
		"body": "isElementWithinColShape( ${1:element theElement}, ${2:colshape theShape} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isElementWithinMarker": {
		"prefix": "isElementWithinMarker",
		"body": "isElementWithinMarker( ${1:element theElement}, ${2:marker theMarker} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isGarageOpen": {
		"prefix": "isGarageOpen",
		"body": "isGarageOpen( ${1:int garageID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isInsideRadarArea": {
		"prefix": "isInsideRadarArea",
		"body": "isInsideRadarArea( ${1:radararea theArea}, ${2:float posX}, ${3:float posY} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isLineOfSightClear": {
		"prefix": "isLineOfSightClear",
		"body": "isLineOfSightClear( ${1:float startX},                              ${2:float startY},                              ${3:float startZ},                              ${4:float endX},                              ${5:float endY},                              ${6:float endZ},                              [ ${7:bool checkBuildings = true},                              ${8:bool checkVehicles = true},                              ${9:bool checkPeds = true},                              ${10:bool checkObjects = true},                              ${11:bool checkDummies = true},                              ${12:bool seeThroughStuff = false},                              ${13:bool ignoreSomeObjectsForCamera = false},                              ${14:element ignoredElement = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isMainMenuActive": {
		"prefix": "isMainMenuActive",
		"body": "isMainMenuActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isMTAWindowActive": {
		"prefix": "isMTAWindowActive",
		"body": "isMTAWindowActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isObjectBreakable": {
		"prefix": "isObjectBreakable",
		"body": "isObjectBreakable( ${1:object theObject} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedChoking": {
		"prefix": "isPedChoking",
		"body": "isPedChoking( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedDoingGangDriveby": {
		"prefix": "isPedDoingGangDriveby",
		"body": "isPedDoingGangDriveby( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedDoingTask": {
		"prefix": "isPedDoingTask",
		"body": "isPedDoingTask( ${1:ped thePed}, ${2:string taskName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedDucked": {
		"prefix": "isPedDucked",
		"body": "isPedDucked( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedHeadless": {
		"prefix": "isPedHeadless",
		"body": "isPedHeadless( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedInVehicle": {
		"prefix": "isPedInVehicle",
		"body": "isPedInVehicle( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedOnFire": {
		"prefix": "isPedOnFire",
		"body": "isPedOnFire( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedOnGround": {
		"prefix": "isPedOnGround",
		"body": "isPedOnGround( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPedTargetingMarkerEnabled": {
		"prefix": "isPedTargetingMarkerEnabled",
		"body": "isPedTargetingMarkerEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPlayerHudComponentVisible": {
		"prefix": "isPlayerHudComponentVisible",
		"body": "isPlayerHudComponentVisible( ${1:string component} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPlayerMapForced": {
		"prefix": "isPlayerMapForced",
		"body": "isPlayerMapForced( ${1:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isPlayerMapVisible": {
		"prefix": "isPlayerMapVisible",
		"body": "isPlayerMapVisible(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isRadarAreaFlashing": {
		"prefix": "isRadarAreaFlashing",
		"body": "isRadarAreaFlashing( ${1:radararea theRadararea} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isSoundPanningEnabled": {
		"prefix": "isSoundPanningEnabled",
		"body": "isSoundPanningEnabled( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isSoundPaused": {
		"prefix": "isSoundPaused",
		"body": "isSoundPaused( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isTimer": {
		"prefix": "isTimer",
		"body": "isTimer( ${1:timer theTimer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isTrainChainEngine": {
		"prefix": "isTrainChainEngine",
		"body": "isTrainChainEngine( ${1:vehicle theTrain} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isTrainDerailable": {
		"prefix": "isTrainDerailable",
		"body": "isTrainDerailable( ${1:vehicle vehicleToCheck} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isTrainDerailed": {
		"prefix": "isTrainDerailed",
		"body": "isTrainDerailed( ${1:vehicle vehicleToCheck} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isTransferBoxActive": {
		"prefix": "isTransferBoxActive",
		"body": "isTransferBoxActive(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleBlown": {
		"prefix": "isVehicleBlown",
		"body": "isVehicleBlown( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleDamageProof": {
		"prefix": "isVehicleDamageProof",
		"body": "isVehicleDamageProof( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleFuelTankExplodable": {
		"prefix": "isVehicleFuelTankExplodable",
		"body": "isVehicleFuelTankExplodable( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleLocked": {
		"prefix": "isVehicleLocked",
		"body": "isVehicleLocked( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleNitroActivated": {
		"prefix": "isVehicleNitroActivated",
		"body": "isVehicleNitroActivated( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleNitroRecharging": {
		"prefix": "isVehicleNitroRecharging",
		"body": "isVehicleNitroRecharging( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleOnGround": {
		"prefix": "isVehicleOnGround",
		"body": "isVehicleOnGround( ${1:vehicle theVehicle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVehicleTaxiLightOn": {
		"prefix": "isVehicleTaxiLightOn",
		"body": "isVehicleTaxiLightOn( ${1:vehicle taxi} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isVoiceEnabled": {
		"prefix": "isVoiceEnabled",
		"body": "isVoiceEnabled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isWaterDrawnLast": {
		"prefix": "isWaterDrawnLast",
		"body": "isWaterDrawnLast(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isWorldSoundEnabled": {
		"prefix": "isWorldSoundEnabled",
		"body": "isWorldSoundEnabled( ${1:int group}, [ ${2:int index = }-1 ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"isWorldSpecialPropertyEnabled": {
		"prefix": "isWorldSpecialPropertyEnabled",
		"body": "isWorldSpecialPropertyEnabled( ${1:string propname} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"killTimer": {
		"prefix": "killTimer",
		"body": "killTimer( ${1:timer theTimer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"loadBrowserURL": {
		"prefix": "loadBrowserURL",
		"body": "loadBrowserURL( ${1:browser webBrowser}, ${2:string url [}, ${3:string postData = \"\"}, ${4:bool urlEncoded = true} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"md5": {
		"prefix": "md5",
		"body": "md5( ${1:string str} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"moveObject": {
		"prefix": "moveObject",
		"body": "moveObject( ${1:object theObject}, ${2:int time}, ${3:float targetx}, ${4:float targety}, ${5:float targetz [}, ${6:float moverx}, ${7:float movery}, ${8:float moverz}, ${9:string strEasingType}, ${10:float fEasingPeriod}, ${11:float fEasingAmplitude}, ${12:float fEasingOvershoot }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"outputChatBox": {
		"prefix": "outputChatBox",
		"body": "outputChatBox( ${1:string text }[, ${2:element visibleTo=getRootElement()}, ${3:int r=231}, ${4:int g=217}, ${5:int b=176}, ${6:bool colorCoded=false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"outputConsole": {
		"prefix": "outputConsole",
		"body": "outputConsole( ${1:string text}, [ ${2:element visibleTo=getRootElement()} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"outputDebugString": {
		"prefix": "outputDebugString",
		"body": "outputDebugString( ${1:string text}, [ ${2:int level=3}, ${3:int red=255}, ${4:int green=255}, ${5:int blue=255} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"playSFX": {
		"prefix": "playSFX",
		"body": "playSFX( ${1:string containerName}, ${2:int bankId}, ${3:int soundId }[, ${4:bool looped = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"playSFX3D": {
		"prefix": "playSFX3D",
		"body": "playSFX3D( ${1:string containerName}, ${2:int bankId}, ${3:int soundId}, ${4:float x}, ${5:float y}, ${6:float z }[, ${7:bool looped = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"playSound": {
		"prefix": "playSound",
		"body": "playSound( ${1:string soundPath}, [ ${2:bool looped = false }, ${2:bool throttled = true}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"playSound3D": {
		"prefix": "playSound3D",
		"body": "playSound3D( ${1:string soundPath}, ${2:float x}, ${3:float y}, ${4:float z}, [ ${5:bool looped = false }, ${2:bool throttled = false}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"playSoundFrontEnd": {
		"prefix": "playSoundFrontEnd",
		"body": "playSoundFrontEnd( ${1:player thePlayer}, ${2:int sound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"pregFind": {
		"prefix": "pregFind",
		"body": "pregFind( ${1:string subject}, ${2:string pattern }[, int/${3:string flags }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"pregMatch": {
		"prefix": "pregMatch",
		"body": "pregMatch( ${1:string base}, ${2:string pattern }[, int/${3:string flags = 0}, ${4:int maxResults = 100000} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"pregReplace": {
		"prefix": "pregReplace",
		"body": "pregReplace( ${1:string subject}, ${2:string pattern}, ${3:string replacement }[, int/${4:string flags }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removeCommandHandler": {
		"prefix": "removeCommandHandler",
		"body": "removeCommandHandler( ${1:string commandName }[, ${2:function handler}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removeDebugHook": {
		"prefix": "removeDebugHook",
		"body": "removeDebugHook( ${1:string hookType}, ${2:function callbackFunction} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removeEventHandler": {
		"prefix": "removeEventHandler",
		"body": "removeEventHandler( ${1:string eventName}, ${2:element attachedTo}, ${3:function functionVar} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removePedClothes": {
		"prefix": "removePedClothes",
		"body": "removePedClothes( ${1:ped thePed}, ${2:int clothesType}, [ ${3:string clothesTexture}, ${4:string clothesModel }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removePedFromVehicle": {
		"prefix": "removePedFromVehicle",
		"body": "removePedFromVehicle( ${1:ped thePed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removeVehicleUpgrade": {
		"prefix": "removeVehicleUpgrade",
		"body": "removeVehicleUpgrade( ${1:vehicle theVehicle}, ${2:int upgrade} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"removeWorldModel": {
		"prefix": "removeWorldModel",
		"body": "removeWorldModel( ${1:int modelID}, ${2:float radius}, ${3:float x}, ${4:float y}, ${5:float z }[, ${6:int interior = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"requestBrowserDomains": {
		"prefix": "requestBrowserDomains",
		"body": "requestBrowserDomains( ${1:table pages} [, ${2:bool parseAsURL = false}, ${3:function callback} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetAmbientSounds": {
		"prefix": "resetAmbientSounds",
		"body": "resetAmbientSounds(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetFarClipDistance": {
		"prefix": "resetFarClipDistance",
		"body": "resetFarClipDistance(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetFogDistance": {
		"prefix": "resetFogDistance",
		"body": "resetFogDistance(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetHeatHaze": {
		"prefix": "resetHeatHaze",
		"body": "resetHeatHaze(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetMoonSize": {
		"prefix": "resetMoonSize",
		"body": "resetMoonSize(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetRainLevel": {
		"prefix": "resetRainLevel",
		"body": "resetRainLevel(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetSkyGradient": {
		"prefix": "resetSkyGradient",
		"body": "resetSkyGradient(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetSunColor": {
		"prefix": "resetSunColor",
		"body": "resetSunColor(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetSunSize": {
		"prefix": "resetSunSize",
		"body": "resetSunSize(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetTimer": {
		"prefix": "resetTimer",
		"body": "resetTimer( ${1:timer theTimer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetVehicleComponentPosition": {
		"prefix": "resetVehicleComponentPosition",
		"body": "resetVehicleComponentPosition( ${1:vehicle theVehicle}, ${2:string theComponent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetVehicleComponentRotation": {
		"prefix": "resetVehicleComponentRotation",
		"body": "resetVehicleComponentRotation( ${1:vehicle theVehicle}, ${2:string theComponent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetWaterColor": {
		"prefix": "resetWaterColor",
		"body": "resetWaterColor(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetWaterLevel": {
		"prefix": "resetWaterLevel",
		"body": "resetWaterLevel(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetWeaponFiringRate": {
		"prefix": "resetWeaponFiringRate",
		"body": "resetWeaponFiringRate( ${1:weapon theWeapon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetWindVelocity": {
		"prefix": "resetWindVelocity",
		"body": "resetWindVelocity(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"resetWorldSounds": {
		"prefix": "resetWorldSounds",
		"body": "resetWorldSounds(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"restoreAllWorldModels": {
		"prefix": "restoreAllWorldModels",
		"body": "restoreAllWorldModels(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"restoreWorldModel": {
		"prefix": "restoreWorldModel",
		"body": "restoreWorldModel( ${1:int modelID}, ${2:float radius}, ${3:float x}, ${4:float y}, ${5:float z }[, ${6:int iInterior = }-1 ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setAircraftMaxHeight": {
		"prefix": "setAircraftMaxHeight",
		"body": "setAircraftMaxHeight( ${1:float Height} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setAircraftMaxVelocity": {
		"prefix": "setAircraftMaxVelocity",
		"body": "setAircraftMaxVelocity( ${1:float velocity} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setAmbientSoundEnabled": {
		"prefix": "setAmbientSoundEnabled",
		"body": "setAmbientSoundEnabled( ${1:string theType}, ${2:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setAnalogControlState": {
		"prefix": "setAnalogControlState",
		"body": "setAnalogControlState( ${1:string controlName }[, ${2:float state}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBirdsEnabled": {
		"prefix": "setBirdsEnabled",
		"body": "setBirdsEnabled( ${1:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBlipColor": {
		"prefix": "setBlipColor",
		"body": "setBlipColor( ${1:blip theBlip}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBlipIcon": {
		"prefix": "setBlipIcon",
		"body": "setBlipIcon( ${1:blip theBlip}, ${2:int icon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBlipOrdering": {
		"prefix": "setBlipOrdering",
		"body": "setBlipOrdering( ${1:blip theBlip}, ${2:int ordering} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBlipSize": {
		"prefix": "setBlipSize",
		"body": "setBlipSize( ${1:blip theBlip}, ${2:int iconSize} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBlipVisibleDistance": {
		"prefix": "setBlipVisibleDistance",
		"body": "setBlipVisibleDistance( ${1:blip theBlip}, ${2:float theDistance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBrowserAjaxHandler": {
		"prefix": "setBrowserAjaxHandler",
		"body": "setBrowserAjaxHandler( ${1:browser webBrowser}, ${2:string url} [, ${3:function handler}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBrowserProperty": {
		"prefix": "setBrowserProperty",
		"body": "setBrowserProperty( ${1:browser theBrowser}, ${2:string key}, ${3:string value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBrowserRenderingPaused": {
		"prefix": "setBrowserRenderingPaused",
		"body": "setBrowserRenderingPaused( ${1:browser theBrowser}, ${2:bool paused} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setBrowserVolume": {
		"prefix": "setBrowserVolume",
		"body": "setBrowserVolume( ${1:browser theBrowser}, ${2:float volume} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraClip": {
		"prefix": "setCameraClip",
		"body": "setCameraClip( [ ${1:bool objects = true}, ${2:bool vehicles = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraFieldOfView": {
		"prefix": "setCameraFieldOfView",
		"body": "setCameraFieldOfView( ${1:string cameraMode}, ${2:float fieldOfView} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraGoggleEffect": {
		"prefix": "setCameraGoggleEffect",
		"body": "setCameraGoggleEffect( ${1:string goggleEffect} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraInterior": {
		"prefix": "setCameraInterior",
		"body": "setCameraInterior( ${1:player thePlayer}, ${2:int interior} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraMatrix": {
		"prefix": "setCameraMatrix",
		"body": "setCameraMatrix( ${1:player thePlayer}, ${2:float positionX}, ${3:float positionY}, ${4:float positionZ }[, ${5:float lookAtX}, ${6:float lookAtY}, ${7:float lookAtZ}, ${8:float roll = 0}, ${9:float fov = 70} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraTarget": {
		"prefix": "setCameraTarget",
		"body": "setCameraTarget( ${1:player thePlayer }[, ${2:player target = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraViewMode": {
		"prefix": "setCameraViewMode",
		"body": "setCameraViewMode( ${1:int viewMode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCameraShakeLevel": {
		"prefix": "setCameraShakeLevel",
		"body": "setCameraShakeLevel( ${1:int shakeLevel} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setClipboard": {
		"prefix": "setClipboard",
		"body": "setClipboard( ${1:string theText} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCloudsEnabled": {
		"prefix": "setCloudsEnabled",
		"body": "setCloudsEnabled( ${1:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setControlState": {
		"prefix": "setControlState",
		"body": "setControlState( ${1:player thePlayer}, ${2:string control}, ${3:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setCursorPosition": {
		"prefix": "setCursorPosition",
		"body": "setCursorPosition( ${1:int cursorX}, ${2:int cursorY} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setDevelopmentMode": {
		"prefix": "setDevelopmentMode",
		"body": "setDevelopmentMode( ${1:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setEffectDensity": {
		"prefix": "setEffectDensity",
		"body": "setEffectDensity( ${1:effect theEffect}, ${2:float density} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setEffectSpeed": {
		"prefix": "setEffectSpeed",
		"body": "setEffectSpeed( ${1:effect theEffect}, ${2:float speed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementAlpha": {
		"prefix": "setElementAlpha",
		"body": "setElementAlpha( ${1:element theElement}, ${2:int alpha} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementAttachedOffsets": {
		"prefix": "setElementAttachedOffsets",
		"body": "setElementAttachedOffsets( ${1:element theElement}, [ ${2:float xPosOffset}, ${3:float yPosOffset}, ${4:float zPosOffset}, ${5:float xRotOffset}, ${6:float yRotOffset}, ${7:float zRotOffset }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementCollidableWith": {
		"prefix": "setElementCollidableWith",
		"body": "setElementCollidableWith( ${1:element theElement}, ${2:element withElement}, ${3:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementCollisionsEnabled": {
		"prefix": "setElementCollisionsEnabled",
		"body": "setElementCollisionsEnabled( ${1:element theElement}, ${2:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementData": {
		"prefix": "setElementData",
		"body": "setElementData( ${1:element theElement}, ${2:string key}, ${3:var value }[, ${4:bool synchronize = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementDimension": {
		"prefix": "setElementDimension",
		"body": "setElementDimension( ${1:element theElement}, ${2:int dimension} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementDoubleSided": {
		"prefix": "setElementDoubleSided",
		"body": "setElementDoubleSided( ${1:element theElement}, ${2:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementFrozen": {
		"prefix": "setElementFrozen",
		"body": "setElementFrozen( ${1:element theElement}, ${2:bool freezeStatus} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementHealth": {
		"prefix": "setElementHealth",
		"body": "setElementHealth( ${1:element theElement}, ${2:float newHealth} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementID": {
		"prefix": "setElementID",
		"body": "setElementID( ${1:element theElement}, ${2:string name} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementInterior": {
		"prefix": "setElementInterior",
		"body": "setElementInterior( ${1:element theElement}, ${2:int interior }[, ${3:float x}, ${4:float y}, ${5:float z}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementMatrix": {
		"prefix": "setElementMatrix",
		"body": "setElementMatrix( ${1:element theElement}, ${2:table theMatrix} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementModel": {
		"prefix": "setElementModel",
		"body": "setElementModel( ${1:element theElement}, ${2:int model} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementParent": {
		"prefix": "setElementParent",
		"body": "setElementParent( ${1:element theElement}, ${2:element parent} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementPosition": {
		"prefix": "setElementPosition",
		"body": "setElementPosition( ${1:element theElement}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:bool warp = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementRotation": {
		"prefix": "setElementRotation",
		"body": "setElementRotation( ${1:element theElement}, ${2:float rotX}, ${3:float rotY}, ${4:float rotZ }[, ${5:string rotOrder = }\"default\", ${6:bool conformPedRotation = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementStreamable": {
		"prefix": "setElementStreamable",
		"body": "setElementStreamable( ${1:element theElement}, ${2:bool streamable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setElementVelocity": {
		"prefix": "setElementVelocity",
		"body": "setElementVelocity( ${1:element theElement}, ${2:float speedX}, ${3:float speedY}, ${4:float speedZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setFarClipDistance": {
		"prefix": "setFarClipDistance",
		"body": "setFarClipDistance( ${1:float distance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setFogDistance": {
		"prefix": "setFogDistance",
		"body": "setFogDistance( ${1:float distance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setFPSLimit": {
		"prefix": "setFPSLimit",
		"body": "setFPSLimit( ${1:int fpsLimit} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setGameSpeed": {
		"prefix": "setGameSpeed",
		"body": "setGameSpeed( ${1:float value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setGarageOpen": {
		"prefix": "setGarageOpen",
		"body": "setGarageOpen( ${1:int garageID}, ${2:bool open} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setGravity": {
		"prefix": "setGravity",
		"body": "setGravity( ${1:float level} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setHeatHaze": {
		"prefix": "setHeatHaze",
		"body": "setHeatHaze( ${1:int intensity}, [ ${2:int randomShift = 0}, ${3:int speedMin = 12}, ${4:int speedMax = 18}, ${5:int scanSizeX = 75}, ${6:int scanSizeY = 80}, ${7:int renderSizeX = 80}, ${8:int renderSizeY = 85}, ${9:bool bShowInside = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setHeliBladeCollisionsEnabled": {
		"prefix": "setHeliBladeCollisionsEnabled",
		"body": "setHeliBladeCollisionsEnabled( ${1:vehicle theVehicle}, ${2:bool collisions} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setHelicopterRotorSpeed": {
		"prefix": "setHelicopterRotorSpeed",
		"body": "setHelicopterRotorSpeed( ${1:vehicle heli}, ${2:float speed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setInteriorFurnitureEnabled": {
		"prefix": "setInteriorFurnitureEnabled",
		"body": "setInteriorFurnitureEnabled( ${1:int roomID}, ${2:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setInteriorSoundsEnabled": {
		"prefix": "setInteriorSoundsEnabled",
		"body": "setInteriorSoundsEnabled( ${1:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setJetpackMaxHeight": {
		"prefix": "setJetpackMaxHeight",
		"body": "setJetpackMaxHeight( ${1:float Height} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setLowLODElement": {
		"prefix": "setLowLODElement",
		"body": "setLowLODElement( ${1:element theElement}, ${2:element lowLODElement} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setLightRadius": {
		"prefix": "setLightRadius",
		"body": "setLightRadius( ${1:light theLight}, ${2:float radius} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setLightColor": {
		"prefix": "setLightColor",
		"body": "setLightColor( ${1:light theLight}, ${2:float r}, ${3:float g}, ${4:float b} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setLightDirection": {
		"prefix": "setLightDirection",
		"body": "setLightDirection( ${1:light theLight}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMarkerColor": {
		"prefix": "setMarkerColor",
		"body": "setMarkerColor( ${1:marker theMarker}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMarkerIcon": {
		"prefix": "setMarkerIcon",
		"body": "setMarkerIcon( ${1:marker theMarker}, ${2:string icon} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMarkerSize": {
		"prefix": "setMarkerSize",
		"body": "setMarkerSize( ${1:marker theMarker}, ${2:float size} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMarkerTarget": {
		"prefix": "setMarkerTarget",
		"body": "setMarkerTarget( ${1:marker theMarker}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMarkerType": {
		"prefix": "setMarkerType",
		"body": "setMarkerType( ${1:marker theMarker}, ${2:string markerType} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMinuteDuration": {
		"prefix": "setMinuteDuration",
		"body": "setMinuteDuration( ${1:int milliseconds} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setMoonSize": {
		"prefix": "setMoonSize",
		"body": "setMoonSize( ${1:int size} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setObjectBreakable": {
		"prefix": "setObjectBreakable",
		"body": "setObjectBreakable( ${1:object theObject}, ${2:bool breakable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setObjectScale": {
		"prefix": "setObjectScale",
		"body": "setObjectScale( ${1:object theObject}, ${2:float scale }[, ${3:float scaleY}, ${4:float scaleZ }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setOcclusionsEnabled": {
		"prefix": "setOcclusionsEnabled",
		"body": "setOcclusionsEnabled( ${1:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedAimTarget": {
		"prefix": "setPedAimTarget",
		"body": "setPedAimTarget( ${1:ped thePed}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedAnalogControlState": {
		"prefix": "setPedAnalogControlState",
		"body": "setPedAnalogControlState( ${1:ped thePed}, ${2:string control}, ${3:float state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedAnimation": {
		"prefix": "setPedAnimation",
		"body": "setPedAnimation( ${1:ped thePed }[, ${2:string block=nil}, ${3:string anim=nil}, ${4:int time=}-1, ${5:bool loop=true}, ${6:bool updatePosition=true}, ${7:bool interruptable=true}, ${8:bool freezeLastFrame = true}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedAnimationProgress": {
		"prefix": "setPedAnimationProgress",
		"body": "setPedAnimationProgress( ${1:ped thePed }[, ${2:string anim}, ${3:float progress}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedCameraRotation": {
		"prefix": "setPedCameraRotation",
		"body": "setPedCameraRotation( ${1:ped thePed}, ${2:float cameraRotation} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedCanBeKnockedOffBike": {
		"prefix": "setPedCanBeKnockedOffBike",
		"body": "setPedCanBeKnockedOffBike( ${1:ped thePed}, ${2:bool canBeKnockedOffBike} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedControlState": {
		"prefix": "setPedControlState",
		"body": "setPedControlState( ${1:ped thePed}, ${2:string control}, ${3:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedDoingGangDriveby": {
		"prefix": "setPedDoingGangDriveby",
		"body": "setPedDoingGangDriveby( ${1:ped thePed}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedFootBloodEnabled": {
		"prefix": "setPedFootBloodEnabled",
		"body": "setPedFootBloodEnabled( ${1:element thePlayer}, ${2:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedHeadless": {
		"prefix": "setPedHeadless",
		"body": "setPedHeadless( ${1:ped thePed}, ${2:bool headState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedLookAt": {
		"prefix": "setPedLookAt",
		"body": "setPedLookAt( ${1:ped thePed}, ${2:float x}, ${3:float y}, ${4:float z }[, ${5:int time = 3000} [, ${6:int blend = 1000} ], ${7:element target = nil }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedOnFire": {
		"prefix": "setPedOnFire",
		"body": "setPedOnFire( ${1:ped thePed}, ${2:bool isOnFire} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedOxygenLevel": {
		"prefix": "setPedOxygenLevel",
		"body": "setPedOxygenLevel( ${1:ped thePed}, ${2:float oxygen} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedTargetingMarkerEnabled": {
		"prefix": "setPedTargetingMarkerEnabled",
		"body": "setPedTargetingMarkerEnabled( ${1:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedVoice": {
		"prefix": "setPedVoice",
		"body": "setPedVoice( ${1:ped thePed}, ${2:string voiceType}, ${3:string voiceName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedWalkingStyle": {
		"prefix": "setPedWalkingStyle",
		"body": "setPedWalkingStyle( ${1:ped thePed}, ${2:int style} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPedWeaponSlot": {
		"prefix": "setPedWeaponSlot",
		"body": "setPedWeaponSlot( ${1:ped thePed}, ${2:int weaponSlot} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPickupType": {
		"prefix": "setPickupType",
		"body": "setPickupType( ${1:pickup thePickup}, ${2:int theType}, ${3:int amount}/weapon/model, [ ${4:int ammo }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerBlurLevel": {
		"prefix": "setPlayerBlurLevel",
		"body": "setPlayerBlurLevel( ${1:player thePlayer}, ${2:int level} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerHudComponentVisible": {
		"prefix": "setPlayerHudComponentVisible",
		"body": "setPlayerHudComponentVisible( ${1:player thePlayer}, ${2:string component}, ${3:bool show} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerMoney": {
		"prefix": "setPlayerMoney",
		"body": "setPlayerMoney( ${1:player thePlayer}, ${2:int amount }[, ${3:bool instant = false }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerNametagColor": {
		"prefix": "setPlayerNametagColor",
		"body": "setPlayerNametagColor( ${1:player thePlayer}, ${2:int r}, ${3:int g}, ${4:int b} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerNametagShowing": {
		"prefix": "setPlayerNametagShowing",
		"body": "setPlayerNametagShowing( ${1:player thePlayer}, ${2:bool showing} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setPlayerNametagText": {
		"prefix": "setPlayerNametagText",
		"body": "setPlayerNametagText( ${1:player thePlayer}, ${2:string text} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setProjectileCounter": {
		"prefix": "setProjectileCounter",
		"body": "setProjectileCounter( ${1:projectile projectile}, ${2:int timeToDetonate} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setRadarAreaColor": {
		"prefix": "setRadarAreaColor",
		"body": "setRadarAreaColor( ${1:radararea theRadarArea}, ${2:int r}, ${3:int g}, ${4:int b}, ${5:int a} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setRadarAreaFlashing": {
		"prefix": "setRadarAreaFlashing",
		"body": "setRadarAreaFlashing( ${1:radararea theRadarArea}, ${2:bool flash} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setRadarAreaSize": {
		"prefix": "setRadarAreaSize",
		"body": "setRadarAreaSize( ${1:radararea theRadararea}, ${2:float x}, ${3:float y} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setRadioChannel": {
		"prefix": "setRadioChannel",
		"body": "setRadioChannel( ${1:int ID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setRainLevel": {
		"prefix": "setRainLevel",
		"body": "setRainLevel( ${1:float level} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSkyGradient": {
		"prefix": "setSkyGradient",
		"body": "setSkyGradient( [ ${1:int topRed = 0}, ${2:int topGreen = 0}, ${3:int topBlue = 0}, ${4:int bottomRed = 0}, ${5:int bottomGreen = 0}, ${6:int bottomBlue = 0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundEffectEnabled": {
		"prefix": "setSoundEffectEnabled",
		"body": "setSoundEffectEnabled( ${1:element sound}, ${2:string effectName}, ${3:bool bEnable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundMaxDistance": {
		"prefix": "setSoundMaxDistance",
		"body": "setSoundMaxDistance( ${1:element sound}, ${2:int distance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundMinDistance": {
		"prefix": "setSoundMinDistance",
		"body": "setSoundMinDistance( ${1:element sound}, ${2:int distance} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundPan": {
		"prefix": "setSoundPan",
		"body": "setSoundPan( ${1:element theSound}, ${2:float pan} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundPanningEnabled": {
		"prefix": "setSoundPanningEnabled",
		"body": "setSoundPanningEnabled( ${1:element sound}, ${2:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundPaused": {
		"prefix": "setSoundPaused",
		"body": "setSoundPaused( ${1:element theSound}, ${2:bool paused} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundPosition": {
		"prefix": "setSoundPosition",
		"body": "setSoundPosition( ${1:element theSound}, ${2:float pos} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundProperties": {
		"prefix": "setSoundProperties",
		"body": "setSoundProperties( ${1:element sound}, ${2:float fSampleRate}, ${3:float fTempo}, ${4:float fPitch}, ${5:bool bReverse} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundSpeed": {
		"prefix": "setSoundSpeed",
		"body": "setSoundSpeed( ${1:element theSound}, ${2:float speed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSoundVolume": {
		"prefix": "setSoundVolume",
		"body": "setSoundVolume( ${1:element theSound}, ${2:float volume} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSunColor": {
		"prefix": "setSunColor",
		"body": "setSunColor( ${1:int aRed}, ${2:int aGreen}, ${3:int aBlue}, ${4:int bRed}, ${5:int bGreen}, ${6:int bBlue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setSunSize": {
		"prefix": "setSunSize",
		"body": "setSunSize( ${1:int Size} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTime": {
		"prefix": "setTime",
		"body": "setTime( ${1:int hour}, ${2:int minute} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTimer": {
		"prefix": "setTimer",
		"body": "setTimer( ${1:function theFunction}, ${2:int timeInterval}, ${3:int timesToExecute}, [ ${4:var arguments}... ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrafficLightsLocked": {
		"prefix": "setTrafficLightsLocked",
		"body": "setTrafficLightsLocked( ${1:bool toggle} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrafficLightState": {
		"prefix": "setTrafficLightState",
		"body": "setTrafficLightState( ${1:int state })${2:bool setTrafficLightState }( ${3:string state })${4:bool setTrafficLightState }( ${5:string colorNS}, ${6:string colorEW} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrainDerailable": {
		"prefix": "setTrainDerailable",
		"body": "setTrainDerailable( ${1:vehicle derailableVehicle}, ${2:bool derailable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrainDerailed": {
		"prefix": "setTrainDerailed",
		"body": "setTrainDerailed( ${1:vehicle vehicleToDerail}, ${2:bool derailed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrainDirection": {
		"prefix": "setTrainDirection",
		"body": "setTrainDirection( ${1:vehicle train}, ${2:bool clockwise} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setTrainSpeed": {
		"prefix": "setTrainSpeed",
		"body": "setTrainSpeed( ${1:vehicle train}, ${2:float speed} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleColor": {
		"prefix": "setVehicleColor",
		"body": "setVehicleColor( ${1:vehicle theVehicle}, ${2:int r1}, ${3:int g1}, ${4:int b1}, [${5:int r2}, ${6:int g2}, ${7:int b2},] [${8:int r3}, ${9:int g3}, ${10:int b3},] [${11:int r4}, ${12:int g4}, ${13:int b4}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleComponentPosition": {
		"prefix": "setVehicleComponentPosition",
		"body": "setVehicleComponentPosition( ${1:vehicle theVehicle}, ${2:string theComponent}, ${3:float posX}, ${4:float posY}, ${5:float posZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleComponentRotation": {
		"prefix": "setVehicleComponentRotation",
		"body": "setVehicleComponentRotation( ${1:vehicle theVehicle}, ${2:string theComponent}, ${3:float rotX}, ${4:float rotY}, ${5:float rotZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleComponentVisible": {
		"prefix": "setVehicleComponentVisible",
		"body": "setVehicleComponentVisible( ${1:vehicle theVehicle}, ${2:string theComponent}, ${3:bool visible} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleDamageProof": {
		"prefix": "setVehicleDamageProof",
		"body": "setVehicleDamageProof( ${1:vehicle theVehicle}, ${2:bool damageProof} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleDoorOpenRatio": {
		"prefix": "setVehicleDoorOpenRatio",
		"body": "setVehicleDoorOpenRatio( ${1:vehicle theVehicle}, ${2:int door}, ${3:float ratio }[, ${4:int time = 0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleDoorState": {
		"prefix": "setVehicleDoorState",
		"body": "setVehicleDoorState( ${1:vehicle theVehicle}, ${2:int door}, ${3:int state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleDoorsUndamageable": {
		"prefix": "setVehicleDoorsUndamageable",
		"body": "setVehicleDoorsUndamageable( ${1:vehicle theVehicle}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleEngineState": {
		"prefix": "setVehicleEngineState",
		"body": "setVehicleEngineState( ${1:vehicle theVehicle}, ${2:bool engineState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleFuelTankExplodable": {
		"prefix": "setVehicleFuelTankExplodable",
		"body": "setVehicleFuelTankExplodable( ${1:vehicle theVehicle}, ${2:bool explodable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleGravity": {
		"prefix": "setVehicleGravity",
		"body": "setVehicleGravity( ${1:vehicle theVehicle}, ${2:float x}, ${3:float y}, ${4:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleHeadLightColor": {
		"prefix": "setVehicleHeadLightColor",
		"body": "setVehicleHeadLightColor( ${1:vehicle theVehicle}, ${2:int red}, ${3:int green}, ${4:int blue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleLandingGearDown": {
		"prefix": "setVehicleLandingGearDown",
		"body": "setVehicleLandingGearDown( ${1:vehicle theVehicle}, ${2:bool gearState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleLightState": {
		"prefix": "setVehicleLightState",
		"body": "setVehicleLightState( ${1:vehicle theVehicle}, ${2:int light}, ${3:int state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleLocked": {
		"prefix": "setVehicleLocked",
		"body": "setVehicleLocked( ${1:vehicle theVehicle}, ${2:bool locked} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleNitroActivated": {
		"prefix": "setVehicleNitroActivated",
		"body": "setVehicleNitroActivated( ${1:vehicle theVehicle}, ${2:bool state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleNitroCount": {
		"prefix": "setVehicleNitroCount",
		"body": "setVehicleNitroCount( ${1:vehicle theVehicle}, ${2:int count} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleNitroLevel": {
		"prefix": "setVehicleNitroLevel",
		"body": "setVehicleNitroLevel( ${1:vehicle theVehicle}, ${2:float level} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleOverrideLights": {
		"prefix": "setVehicleOverrideLights",
		"body": "setVehicleOverrideLights( ${1:vehicle theVehicle}, ${2:int value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehiclePaintjob": {
		"prefix": "setVehiclePaintjob",
		"body": "setVehiclePaintjob( ${1:vehicle theVehicle}, ${2:int value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehiclePanelState": {
		"prefix": "setVehiclePanelState",
		"body": "setVehiclePanelState( ${1:vehicle theVehicle}, ${2:int panelID}, ${3:int state} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehiclePlateText": {
		"prefix": "setVehiclePlateText",
		"body": "setVehiclePlateText( ${1:element theVehicle}, ${2:string numberplate} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleSirens": {
		"prefix": "setVehicleSirens",
		"body": "setVehicleSirens( ${1:vehicle theVehicle}, ${2:int sirenPoint}, ${3:float posX}, ${4:float posY}, ${5:float posZ}, ${6:float red}, ${7:float green}, ${8:float blue}, [${9:float alpha = 255}, ${10:float minAlpha = 0.0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleSirensOn": {
		"prefix": "setVehicleSirensOn",
		"body": "setVehicleSirensOn( ${1:vehicle theVehicle }, ${2:bool sirensOn} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleTaxiLightOn": {
		"prefix": "setVehicleTaxiLightOn",
		"body": "setVehicleTaxiLightOn( ${1:vehicle taxi}, ${2:bool LightState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleTurnVelocity": {
		"prefix": "setVehicleTurnVelocity",
		"body": "setVehicleTurnVelocity( ${1:vehicle theVehicle}, ${2:float rx}, ${3:float ry}, ${4:float rz} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleTurretPosition": {
		"prefix": "setVehicleTurretPosition",
		"body": "setVehicleTurretPosition( ${1:vehicle turretVehicle}, ${2:float positionX}, ${3:float positionY} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setVehicleWheelStates": {
		"prefix": "setVehicleWheelStates",
		"body": "setVehicleWheelStates( ${1:vehicle theVehicle}, ${2:int frontLeft}, [ ${3:int rearLeft = }-1, ${4:int frontRight = }-1, ${5:int rearRight = }-1 ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWaterColor": {
		"prefix": "setWaterColor",
		"body": "setWaterColor( ${1:int red}, ${2:int green}, ${3:int blue}, [ ${4:int alpha = 200} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWaterDrawnLast": {
		"prefix": "setWaterDrawnLast",
		"body": "setWaterDrawnLast( ${1:bool bEnabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWaterLevel": {
		"prefix": "setWaterLevel",
		"body": "setWaterLevel( [${1:water theWater},] ${2:float level })${3:bool setWaterLevel }( ${4:float level }[, ${5:bool includeWaterFeatures = true}, ${6:bool includeWaterElements = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWaterVertexPosition": {
		"prefix": "setWaterVertexPosition",
		"body": "setWaterVertexPosition( ${1:water theWater}, ${2:int vertexIndex}, ${3:int x}, ${4:int y}, ${5:float z} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWaveHeight": {
		"prefix": "setWaveHeight",
		"body": "setWaveHeight( ${1:float height} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponAmmo": {
		"prefix": "setWeaponAmmo",
		"body": "setWeaponAmmo( ${1:player thePlayer}, ${2:int weapon}, ${3:int totalAmmo}, [${4:int ammoInClip = 0}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponClipAmmo": {
		"prefix": "setWeaponClipAmmo",
		"body": "setWeaponClipAmmo( ${1:weapon theWeapon}, ${2:int clipAmmo} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponFiringRate": {
		"prefix": "setWeaponFiringRate",
		"body": "setWeaponFiringRate( ${1:weapon theWeapon}, ${2:int firingRate} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponFlags": {
		"prefix": "setWeaponFlags",
		"body": "setWeaponFlags( ${1:weapon theWeapon}, ${2:string theFlag}, ${3:value theValue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponOwner": {
		"prefix": "setWeaponOwner",
		"body": "setWeaponOwner( ${1:weapon theWeapon}, ${2:player theOwner} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponProperty": {
		"prefix": "setWeaponProperty",
		"body": "setWeaponProperty( ${1:int weaponID}/${2:string weaponName}, ${3:string weaponSkill}, ${4:string property}, int/${5:float theValue} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponState": {
		"prefix": "setWeaponState",
		"body": "setWeaponState( ${1:weapon theWeapon}, ${2:string theState} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeaponTarget": {
		"prefix": "setWeaponTarget",
		"body": "setWeaponTarget( ${1:weapon theWeapon}, ${2:element theTarget}, ${3:int iComponentID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeather": {
		"prefix": "setWeather",
		"body": "setWeather( ${1:int weatherID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWeatherBlended": {
		"prefix": "setWeatherBlended",
		"body": "setWeatherBlended( ${1:int weatherID} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWindVelocity": {
		"prefix": "setWindVelocity",
		"body": "setWindVelocity( ${1:float velocityX}, ${2:float velocityY}, ${3:float velocityZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWorldSoundEnabled": {
		"prefix": "setWorldSoundEnabled",
		"body": "setWorldSoundEnabled( ${1:int group}, [ ${2:int index = }-1, ] ${3:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"setWorldSpecialPropertyEnabled": {
		"prefix": "setWorldSpecialPropertyEnabled",
		"body": "setWorldSpecialPropertyEnabled( ${1:string propname}, ${2:bool enable} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"sha256": {
		"prefix": "sha256",
		"body": "sha256( ${1:string str} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"showChat": {
		"prefix": "showChat",
		"body": "showChat( ${1:bool show} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"showCursor": {
		"prefix": "showCursor",
		"body": "showCursor( ${1:player thePlayer}, ${2:bool show}, [ ${3:bool toggleControls = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"showPlayerHudComponent": {
		"prefix": "showPlayerHudComponent",
		"body": "showPlayerHudComponent( ${1:player thePlayer}, ${2:string component}, ${3:bool show} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"split": {
		"prefix": "split",
		"body": "split( ${1:string stringToSplit}, string / ${2:int separatingChar} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"stopObject": {
		"prefix": "stopObject",
		"body": "stopObject( ${1:object theobject} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"stopSound": {
		"prefix": "stopSound",
		"body": "stopSound( ${1:element theSound} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"takePlayerMoney": {
		"prefix": "takePlayerMoney",
		"body": "takePlayerMoney( ${1:player thePlayer}, ${2:int amount} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"testLineAgainstWater": {
		"prefix": "testLineAgainstWater",
		"body": "testLineAgainstWater( ${1:float startX}, ${2:float startY}, ${3:float startZ}, ${4:float endX}, ${5:float endY}, ${6:float endZ} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"tocolor": {
		"prefix": "tocolor",
		"body": "tocolor( ${1:int red}, ${2:int green}, ${3:int blue }[, ${4:int alpha = 255}] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"toggleAllControls": {
		"prefix": "toggleAllControls",
		"body": "toggleAllControls( ${1:player thePlayer}, ${2:bool enabled}, [ ${3:bool gtaControls = true}, ${4:bool mtaControls = true }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"toggleBrowserDevTools": {
		"prefix": "toggleBrowserDevTools",
		"body": "toggleBrowserDevTools( ${1:browser webBrowser}, ${2:bool visible} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"toggleControl": {
		"prefix": "toggleControl",
		"body": "toggleControl( ${1:player thePlayer}, ${2:string control}, ${3:bool enabled} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"toggleObjectRespawn": {
		"prefix": "toggleObjectRespawn",
		"body": "toggleObjectRespawn( ${1:object theObject}, ${2:bool respawn} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"toJSON": {
		"prefix": "toJSON",
		"body": "toJSON( ${1:var value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"triggerEvent": {
		"prefix": "triggerEvent",
		"body": "triggerEvent( ${1:string eventName}, ${2:element baseElement}, [ ${3:var argument1}, ... ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"triggerLatentServerEvent": {
		"prefix": "triggerLatentServerEvent",
		"body": "triggerLatentServerEvent( ${1:string event}, [${2:int bandwidth=5000},] [${3:bool persist=false},] ${4:element theElement}, [arguments...] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"triggerServerEvent": {
		"prefix": "triggerServerEvent",
		"body": "triggerServerEvent( ${1:string event}, ${2:element theElement}, [arguments...] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"unbindKey": {
		"prefix": "unbindKey",
		"body": "unbindKey( ${1:player thePlayer}, ${2:string key}, ${3:string keyState}, ${4:string command })${5:bool unbindKey }( ${6:player thePlayer}, ${7:string key}, [ ${8:string keyState}, ${9:function handler  }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"usePickup": {
		"prefix": "usePickup",
		"body": "usePickup( ${1:pickup thePickup}, ${2:player thePlayer} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"utfChar": {
		"prefix": "utfChar",
		"body": "utfChar( ${1:int characterCode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"utfCode": {
		"prefix": "utfCode",
		"body": "utfCode( ${1:string theString} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"utfLen": {
		"prefix": "utfLen",
		"body": "utfLen( ${1:string theString} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"utfSeek": {
		"prefix": "utfSeek",
		"body": "utfSeek( ${1:string theString}, ${2:int position} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"utfSub": {
		"prefix": "utfSub",
		"body": "utfSub( ${1:string theString}, ${2:int Start}, ${3:int End} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"warpPedIntoVehicle": {
		"prefix": "warpPedIntoVehicle",
		"body": "warpPedIntoVehicle( ${1:ped thePed}, ${2:vehicle theVehicle}, [ ${3:int seat=0} ] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"wasEventCancelled": {
		"prefix": "wasEventCancelled",
		"body": "wasEventCancelled(  )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlCopyFile": {
		"prefix": "xmlCopyFile",
		"body": "xmlCopyFile( ${1:xmlnode nodeToCopy}, ${2:string newFilePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlCreateChild": {
		"prefix": "xmlCreateChild",
		"body": "xmlCreateChild( ${1:xmlnode parentNode}, ${2:string tagName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlCreateFile": {
		"prefix": "xmlCreateFile",
		"body": "xmlCreateFile( ${1:string filePath}, ${2:string rootNodeName} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlDestroyNode": {
		"prefix": "xmlDestroyNode",
		"body": "xmlDestroyNode( ${1:xmlnode theXMLNode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlFindChild": {
		"prefix": "xmlFindChild",
		"body": "xmlFindChild( ${1:xmlnode parent}, ${2:string tagName}, ${3:int index} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlLoadFile": {
		"prefix": "xmlLoadFile",
		"body": "xmlLoadFile( ${1:string filePath} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetAttribute": {
		"prefix": "xmlNodeGetAttribute",
		"body": "xmlNodeGetAttribute( ${1:xmlnode node}, ${2:string name} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetAttributes": {
		"prefix": "xmlNodeGetAttributes",
		"body": "xmlNodeGetAttributes( ${1:xmlnode node} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetChildren": {
		"prefix": "xmlNodeGetChildren",
		"body": "xmlNodeGetChildren( ${1:xmlnode parent}, [ ${2:int index }] )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetName": {
		"prefix": "xmlNodeGetName",
		"body": "xmlNodeGetName( ${1:xmlnode node} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetParent": {
		"prefix": "xmlNodeGetParent",
		"body": "xmlNodeGetParent( ${1:xmlnode node} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeGetValue": {
		"prefix": "xmlNodeGetValue",
		"body": "xmlNodeGetValue( ${1:xmlnode theXMLNode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeSetAttribute": {
		"prefix": "xmlNodeSetAttribute",
		"body": "xmlNodeSetAttribute( ${1:xmlnode node}, ${2:string name}, string/${3:float value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeSetName": {
		"prefix": "xmlNodeSetName",
		"body": "xmlNodeSetName( ${1:xmlnode node}, ${2:string name} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlNodeSetValue": {
		"prefix": "xmlNodeSetValue",
		"body": "xmlNodeSetValue( ${1:xmlnode theXMLNode}, ${2:string value} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlSaveFile": {
		"prefix": "xmlSaveFile",
		"body": "xmlSaveFile( ${1:xmlnode rootNode} )",
		"description": "Client-side",
		"scope": "source.lua"
	},
	"xmlUnloadFile": {
		"prefix": "xmlUnloadFile",
		"body": "xmlUnloadFile( ${1:xmlnode node} )",
		"description": "Client-side",
		"scope": "source.lua"
	}
}